(function webpackUniversalModuleDefinition(root, factory) { if (typeof exports === "object" && typeof module === "object") module.exports = factory(); else if (typeof define === "function" && define.amd) define([], factory); else if (typeof exports === "object") exports["Viewing.Extension.Transform"] = factory(); else root["Viewing.Extension.Transform"] = factory() })(this, function () {
	return function (modules) { var installedModules = {}; function __webpack_require__(moduleId) { if (installedModules[moduleId]) return installedModules[moduleId].exports; var module = installedModules[moduleId] = { exports: {}, id: moduleId, loaded: false }; modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); module.loaded = true; return module.exports } __webpack_require__.m = modules; __webpack_require__.c = installedModules; __webpack_require__.p = ""; return __webpack_require__(0) }({
		0: function (module, exports, __webpack_require__) { eval("'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ViewingTool = __webpack_require__(171);\n\nvar _ViewingTool2 = _interopRequireDefault(_ViewingTool);\n\nvar _ViewingTool3 = __webpack_require__(170);\n\nvar _ViewingTool4 = _interopRequireDefault(_ViewingTool3);\n\nvar _Viewer = __webpack_require__(11);\n\nvar _Viewer2 = _interopRequireDefault(_Viewer);\n\nvar _Viewer3 = __webpack_require__(8);\n\nvar _Viewer4 = _interopRequireDefault(_Viewer3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////////////\n// Viewing.Extension.CSSTVExtension\n// by Philippe Leefsma, April 2016\n//\n/////////////////////////////////////////////////////////////////////\n\n\nvar TransformExtension = function (_ExtensionBase) {\n  _inherits(TransformExtension, _ExtensionBase);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function TransformExtension(viewer) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TransformExtension);\n\n    var _this = _possibleConstructorReturn(this, (TransformExtension.__proto__ || Object.getPrototypeOf(TransformExtension)).call(this, viewer, options));\n\n    _this.translateTool = new _ViewingTool2.default(viewer);\n\n    _this._viewer.toolController.registerTool(_this.translateTool);\n\n    _this.rotateTool = new _ViewingTool4.default(viewer);\n\n    _this._viewer.toolController.registerTool(_this.rotateTool);\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(TransformExtension, [{\n    key: 'load',\n\n\n    /////////////////////////////////////////////////////////////////\n    // Load callback\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function load() {\n      var _this2 = this;\n\n      this._txControl = _Viewer4.default.createButton('toolbar-translate', 'fa fa-arrows-alt', 'Translate Tool', function () {\n\n        var txTool = _this2.translateTool.getName();\n        var rxTool = _this2.rotateTool.getName();\n\n        if (_this2.translateTool.active) {\n\n          _this2._viewer.toolController.deactivateTool(txTool);\n          _this2._txControl.container.classList.remove('active');\n          _this2._comboCtrl.container.classList.remove('active');\n        } else {\n\n          _this2._viewer.toolController.activateTool(txTool);\n          _this2._txControl.container.classList.add('active');\n\n          _this2._viewer.toolController.deactivateTool(rxTool);\n          _this2._rxControl.container.classList.remove('active');\n\n          _this2._comboCtrl.container.classList.add('active');\n        }\n      });\n\n      this._rxControl = _Viewer4.default.createButton('toolbar-rotate', 'fa fa-refresh', 'Rotate Tool', function () {\n\n        var txTool = _this2.translateTool.getName();\n        var rxTool = _this2.rotateTool.getName();\n\n        if (_this2.rotateTool.active) {\n\n          _this2._viewer.toolController.deactivateTool(rxTool);\n          _this2._rxControl.container.classList.remove('active');\n          _this2._comboCtrl.container.classList.remove('active');\n        } else {\n\n          _this2._viewer.toolController.activateTool(rxTool);\n          _this2._rxControl.container.classList.add('active');\n\n          _this2._viewer.toolController.deactivateTool(txTool);\n          _this2._txControl.container.classList.remove('active');\n\n          _this2._comboCtrl.container.classList.add('active');\n        }\n      });\n\n      this.parentControl = this._options.parentControl;\n\n      if (!this.parentControl) {\n\n        var viewerToolbar = this._viewer.getToolbar(true);\n\n        this.parentControl = new Autodesk.Viewing.UI.ControlGroup('transform');\n\n        viewerToolbar.addControl(this.parentControl);\n      }\n\n      this._comboCtrl = new Autodesk.Viewing.UI.ComboButton('transform-combo');\n\n      this._comboCtrl.setToolTip('Transform Tools');\n\n      this._comboCtrl.icon.style.fontSize = '24px';\n      this._comboCtrl.icon.style.transform = 'rotateY(180Deg)';\n\n      this._comboCtrl.icon.className = 'glyphicon glyphicon-wrench';\nthis._txControl.icon.className = 'glyphicon glyphicon-fullscreen' \n this._rxControl.icon.className = 'glyphicon glyphicon-repeat' \n\n      this._comboCtrl.addControl(this._txControl);\n      this._comboCtrl.addControl(this._rxControl);\n\n      var openCombo = this._comboCtrl.onClick;\n\n      this._comboCtrl.onClick = function (e) {\n\n        if (_this2._comboCtrl.container.classList.contains('active')) {\n\n          _this2._txControl.container.classList.remove('active');\n          _this2._rxControl.container.classList.remove('active');\n\n          _this2._comboCtrl.container.classList.remove('active');\n\n          var txTool = _this2.translateTool.getName();\n          var rxTool = _this2.rotateTool.getName();\n\n          _this2._viewer.toolController.deactivateTool(txTool);\n          _this2._viewer.toolController.deactivateTool(rxTool);\n        } else {\n\n          openCombo();\n        }\n      };\n\n      this.parentControl.addControl(this._comboCtrl);\n\n      console.log('Viewing.Extension.Transform loaded');\n\n      return true;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Unload callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'unload',\n    value: function unload() {\n\n      this.parentControl.removeControl(this._comboCtrl);\n\n      this._viewer.toolController.deactivateTool(this.translateTool.getName());\n\n      this._viewer.toolController.deactivateTool(this.rotateTool.getName());\n\n      console.log('Viewing.Extension.Transform unloaded');\n    }\n  }], [{\n    key: 'ExtensionId',\n    get: function get() {\n\n      return 'Viewing.Extension.Transform';\n    }\n  }]);\n\n  return TransformExtension;\n}(_Viewer2.default);\n\nAutodesk.Viewing.theExtensionManager.registerExtension(TransformExtension.ExtensionId, TransformExtension);\n\n//function createRadioButton() {\n//\n//  var viewerToolbar = _viewer.getToolbar(true);\n//\n//  var modelTools = viewerToolbar.getControl(\n//    Autodesk.Viewing.TOOLBAR.MODELTOOLSID);\n//\n//  var radio = new Autodesk.Viewing.UI.RadioButtonGroup(\n//    \"Autodesk.ADN.Viewing.Extension.Toolbar.Radio\");\n//\n//  radio.addClass('toolbar-vertical-group');\n//\n//  var radioBtn1 = createButton(\n//    'Autodesk.ADN.Viewing.Extension.Toolbar.RadioBtn1',\n//    'url(img/adsk/adsk-24x24-32.png)',\n//    'Radio button1',\n//    function(e) {\n//      alert(\"I'm a radio button!\");\n//    });\n//\n//  var radioBtn2 = createButton(\n//    'Autodesk.ADN.Viewing.Extension.Toolbar.RadioBtn2',\n//    'url(img/adsk/adsk-24x24-32.png)',\n//    'Radio button2',\n//    function(e) {\n//      alert(\"I'm another radio button!\");\n//    });\n//\n//  radio.addControl(radioBtn1);\n//  radio.addControl(radioBtn2);\n//\n//  modelTools.addControl(radio);\n//}//# sourceMappingURL=data:application/json;charset=utf-8;base64,") }, 2: function (module, exports, __webpack_require__) { eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventsEmitter = __webpack_require__(6);\n\nvar _EventsEmitter2 = _interopRequireDefault(_EventsEmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_EventsEmitter2.default.Composer = _EventsEmitter.EventsEmitterComposer;\n\nexports.default = _EventsEmitter2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FdmVudHNFbWl0dGVyL2luZGV4LmpzPzQ1ZTEiXSwibmFtZXMiOlsiQ29tcG9zZXIiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7QUFHQSx3QkFBY0EsUUFBZCIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudHNFbWl0dGVyQ29tcG9zZXJ9IGZyb20gJy4vRXZlbnRzRW1pdHRlcidcbmltcG9ydCBFdmVudHNFbWl0dGVyIGZyb20gJy4vRXZlbnRzRW1pdHRlcidcblxuRXZlbnRzRW1pdHRlci5Db21wb3NlciA9IEV2ZW50c0VtaXR0ZXJDb21wb3NlclxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHNFbWl0dGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9FdmVudHNFbWl0dGVyL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==") }, 6: function (module, exports) {
			eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EventsEmitter = function () {\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n  function EventsEmitter() {\n    _classCallCheck(this, EventsEmitter);\n\n    this._events = {};\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // Supports multiple events space-separated\n  //\n  ///////////////////////////////////////////////////////////////////\n\n\n  _createClass(EventsEmitter, [{\n    key: 'on',\n    value: function on(events, fct) {\n      var _this = this;\n\n      events.split(' ').forEach(function (event) {\n\n        _this._events[event] = _this._events[event] || [];\n        _this._events[event].push(fct);\n      });\n\n      return this;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    // Supports multiple events space-separated\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'off',\n    value: function off(events, fct) {\n      var _this2 = this;\n\n      if (events == undefined) {\n        this._events = {};\n        return;\n      }\n\n      events.split(' ').forEach(function (event) {\n\n        if (event in _this2._events === false) return;\n\n        if (fct) {\n\n          _this2._events[event].splice(_this2._events[event].indexOf(fct), 1);\n        } else {\n\n          _this2._events[event] = [];\n        }\n      });\n\n      return this;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'emit',\n    value: function emit(event /* , args... */) {\n\n      if (this._events[event] === undefined) return;\n\n      var tmpArray = this._events[event].slice();\n\n      for (var i = 0; i < tmpArray.length; ++i) {\n\n        var result = tmpArray[i].apply(this, Array.prototype.slice.call(arguments, 1));\n\n        if (result !== undefined) return result;\n      }\n\n      return undefined;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'guid',\n    value: function guid() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xxxxxxxxxxxx';\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n  }]);\n\n  return EventsEmitter;\n}();\n\n///////////////////////////////////////////////////////////////////\n//\n//\n///////////////////////////////////////////////////////////////////\n\n\nexports.default = EventsEmitter;\nvar EventsEmitterComposer = exports.EventsEmitterComposer = function EventsEmitterComposer(BaseClass) {\n  return function (_BaseClass) {\n    _inherits(_class, _BaseClass);\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n    function _class(arg1, arg2, arg3, arg4, arg5) {\n      _classCallCheck(this, _class);\n\n      var _this3 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, arg1, arg2, arg3, arg4, arg5));\n\n      _this3._events = {};\n      return _this3;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    // Supports multiple events space-separated\n    //\n    ///////////////////////////////////////////////////////////////////\n\n\n    _createClass(_class, [{\n      key: 'on',\n      value: function on(events, fct) {\n        var _this4 = this;\n\n        events.split(' ').forEach(function (event) {\n\n          _this4._events[event] = _this4._events[event] || [];\n          _this4._events[event].push(fct);\n        });\n\n        return this;\n      }\n\n      ///////////////////////////////////////////////////////////////////\n      // Supports multiple events space-separated\n      //\n      ///////////////////////////////////////////////////////////////////\n\n    }, {\n      key: 'off',\n      value: function off(events, fct) {\n        var _this5 = this;\n\n        if (events == undefined) {\n          this._events = {};\n          return;\n        }\n\n        events.split(' ').forEach(function (event) {\n\n          if (event in _this5._events === false) return;\n\n          if (fct) {\n\n            _this5._events[event].splice(_this5._events[event].indexOf(fct), 1);\n          } else {\n\n            _this5._events[event] = [];\n          }\n        });\n\n        return this;\n      }\n\n      ///////////////////////////////////////////////////////////////////\n      //\n      //\n      ///////////////////////////////////////////////////////////////////\n\n    }, {\n      key: 'emit',\n      value: function emit(event /* , args... */) {\n\n        if (this._events[event] === undefined) return;\n\n        var tmpArray = this._events[event].slice();\n\n        for (var i = 0; i < tmpArray.length; ++i) {\n\n          var result = tmpArray[i].apply(this, Array.prototype.slice.call(arguments, 1));\n\n          if (result !== undefined) return result;\n        }\n\n        return undefined;\n      }\n\n      ///////////////////////////////////////////////////////////////////\n      //\n      //\n      ///////////////////////////////////////////////////////////////////\n\n    }, {\n      key: 'guid',\n      value: function guid() {\n        var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xxxxxxxxxxxx';\n\n\n        var d = new Date().getTime();\n\n        var guid = format.replace(/[xy]/g, function (c) {\n          var r = (d + Math.random() * 16) % 16 | 0;\n          d = Math.floor(d / 16);\n          return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n        });\n\n        return guid;\n      }\n    }]);\n\n    return _class;\n  }(BaseClass);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},8:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Viewer = __webpack_require__(12);\n\nvar _Viewer2 = _interopRequireDefault(_Viewer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Viewer2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIuVG9vbGtpdC9pbmRleC5qcz81ZjFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlld2VyVG9vbGtpdCBmcm9tICcuL1ZpZXdlci5Ub29sa2l0J1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3ZXJUb29sa2l0XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIuVG9vbGtpdC9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},10:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter = __webpack_require__(2);\n\nvar _EventsEmitter2 = _interopRequireDefault(_EventsEmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///////////////////////////////////////////////////////////////////////////////\n//\n//\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar ExtensionBase = function (_EventsEmitter$Compos) {\n  _inherits(ExtensionBase, _EventsEmitter$Compos);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function ExtensionBase(viewer) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ExtensionBase);\n\n    var _this = _possibleConstructorReturn(this, (ExtensionBase.__proto__ || Object.getPrototypeOf(ExtensionBase)).call(this, viewer, options));\n\n    _this._viewer = viewer;\n\n    _this._options = options;\n\n    _this._events = {};\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(ExtensionBase, [{\n    key: 'load',\n\n\n    /////////////////////////////////////////////////////////////////\n    // Load callback\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function load() {\n\n      return true;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Unload callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'unload',\n    value: function unload() {\n\n      return true;\n    }\n  }], [{\n    key: 'guid',\n\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n    value: function guid() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xxxxxxxxxx';\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n  }, {\n    key: 'ExtensionId',\n    get: function get() {\n\n      return 'Viewing.Extension.Base';\n    }\n  }]);\n\n  return ExtensionBase;\n}(_EventsEmitter2.default.Composer(Autodesk.Viewing.Extension));\n\nexports.default = ExtensionBase;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIuRXh0ZW5zaW9uQmFzZS9WaWV3ZXIuRXh0ZW5zaW9uQmFzZS5qcz82OGRjIl0sIm5hbWVzIjpbIkV4dGVuc2lvbkJhc2UiLCJ2aWV3ZXIiLCJvcHRpb25zIiwiX3ZpZXdlciIsIl9vcHRpb25zIiwiX2V2ZW50cyIsImZvcm1hdCIsImQiLCJEYXRlIiwiZ2V0VGltZSIsImd1aWQiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJ0b1N0cmluZyIsIkNvbXBvc2VyIiwiQXV0b2Rlc2siLCJWaWV3aW5nIiwiRXh0ZW5zaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUtBOzs7Ozs7Ozs7OytlQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztJQUdxQkEsYTs7O0FBR25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQWFDLE1BQWIsRUFBbUM7QUFBQSxRQUFkQyxPQUFjLHVFQUFKLEVBQUk7O0FBQUE7O0FBQUEsOEhBRTNCRCxNQUYyQixFQUVuQkMsT0FGbUI7O0FBSWpDLFVBQUtDLE9BQUwsR0FBZUYsTUFBZjs7QUFFQSxVQUFLRyxRQUFMLEdBQWdCRixPQUFoQjs7QUFFQSxVQUFLRyxPQUFMLEdBQWUsRUFBZjtBQVJpQztBQVNsQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQXlCQTtBQUNBO0FBQ0E7QUFDQTsyQkFDTzs7QUFFTCxhQUFPLElBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7Ozs2QkFDUzs7QUFFUCxhQUFPLElBQVA7QUFDRDs7Ozs7QUFuQ0Q7QUFDQTtBQUNBO0FBQ0E7MkJBQ21DO0FBQUEsVUFBdkJDLE1BQXVCLHVFQUFkLFlBQWM7OztBQUVqQyxVQUFJQyxJQUFJLElBQUlDLElBQUosR0FBV0MsT0FBWCxFQUFSOztBQUVBLFVBQUlDLE9BQU9KLE9BQU9LLE9BQVAsQ0FDVCxPQURTLEVBRVQsVUFBVUMsQ0FBVixFQUFhO0FBQ1gsWUFBSUMsSUFBSSxDQUFDTixJQUFJTyxLQUFLQyxNQUFMLEtBQWdCLEVBQXJCLElBQTJCLEVBQTNCLEdBQWdDLENBQXhDO0FBQ0FSLFlBQUlPLEtBQUtFLEtBQUwsQ0FBV1QsSUFBSSxFQUFmLENBQUo7QUFDQSxlQUFPLENBQUNLLEtBQUssR0FBTCxHQUFXQyxDQUFYLEdBQWdCQSxJQUFJLEdBQUosR0FBVSxHQUEzQixFQUFpQ0ksUUFBakMsQ0FBMEMsRUFBMUMsQ0FBUDtBQUNELE9BTlEsQ0FBWDs7QUFRQSxhQUFPUCxJQUFQO0FBQ0Q7Ozt3QkF0QndCOztBQUV2QixhQUFPLHdCQUFQO0FBQ0Q7Ozs7RUF4QkQsd0JBQWNRLFFBQWQsQ0FBd0JDLFNBQVNDLE9BQVQsQ0FBaUJDLFNBQXpDLEM7O2tCQURtQnJCLGEiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy9cbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5pbXBvcnQgRXZlbnRzRW1pdHRlciBmcm9tICdFdmVudHNFbWl0dGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRlbnNpb25CYXNlIGV4dGVuZHNcbiAgRXZlbnRzRW1pdHRlci5Db21wb3NlciAoQXV0b2Rlc2suVmlld2luZy5FeHRlbnNpb24pIHtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBDbGFzcyBjb25zdHJ1Y3RvclxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBjb25zdHJ1Y3RvciAodmlld2VyLCBvcHRpb25zID0ge30pIHtcblxuICAgIHN1cGVyKHZpZXdlciwgb3B0aW9ucylcblxuICAgIHRoaXMuX3ZpZXdlciA9IHZpZXdlclxuXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcblxuICAgIHRoaXMuX2V2ZW50cyA9IHt9XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBFeHRlbnNpb24gSWRcbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgc3RhdGljIGdldCBFeHRlbnNpb25JZCgpIHtcblxuICAgIHJldHVybiAnVmlld2luZy5FeHRlbnNpb24uQmFzZSdcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzdGF0aWMgZ3VpZChmb3JtYXQgPSAneHh4eHh4eHh4eCcpIHtcblxuICAgIHZhciBkID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblxuICAgIHZhciBndWlkID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAvW3h5XS9nLFxuICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDBcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KVxuICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpXG4gICAgICB9KVxuXG4gICAgcmV0dXJuIGd1aWRcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIExvYWQgY2FsbGJhY2tcbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgbG9hZCgpIHtcblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBVbmxvYWQgY2FsbGJhY2tcbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdW5sb2FkKCkge1xuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIuRXh0ZW5zaW9uQmFzZS9WaWV3ZXIuRXh0ZW5zaW9uQmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},11:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Viewer = __webpack_require__(10);\n\nvar _Viewer2 = _interopRequireDefault(_Viewer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Viewer2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIuRXh0ZW5zaW9uQmFzZS9pbmRleC5qcz8zZmIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZXdlckV4dGVuc2lvbkJhc2UgZnJvbSAnLi9WaWV3ZXIuRXh0ZW5zaW9uQmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgVmlld2VyRXh0ZW5zaW9uQmFzZVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvVmlld2VyLkV4dGVuc2lvbkJhc2UvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9")},12:function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ViewerToolkit = function () {\n  function ViewerToolkit() {\n    _classCallCheck(this, ViewerToolkit);\n  }\n\n  _createClass(ViewerToolkit, null, [{\n    key: 'guid',\n\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n    value: function guid() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xxxxxxxxxxxx';\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n\n    /////////////////////////////////////////////\n    //mobile detection\n    //\n    /////////////////////////////////////////////\n\n  }, {\n    key: 'getDefaultViewablePath',\n\n\n    //////////////////////////////////////////////////////////////////////////\n    // Return default viewable path: first 3d or 2d item\n    //\n    //////////////////////////////////////////////////////////////////////////\n    value: function getDefaultViewablePath(doc) {\n      var roles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['3d', '2d'];\n\n\n      var rootItem = doc.getRootItem();\n\n      var roleArray = [].concat(_toConsumableArray(roles));\n\n      var items = [];\n\n      roleArray.forEach(function (role) {\n\n        items = [].concat(_toConsumableArray(items), _toConsumableArray(Autodesk.Viewing.Document.getSubItemsWithProperties(rootItem, { type: 'geometry', role: role }, true)));\n      });\n\n      return items.length ? doc.getViewablePath(items[0]) : null;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Toolbar button\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createButton',\n    value: function createButton(id, className, tooltip, handler) {\n\n      var button = new Autodesk.Viewing.UI.Button(id);\n\n      button.icon.style.fontSize = '24px';\n\n      button.icon.className = className;\n\n      button.setToolTip(tooltip);\n\n      button.onClick = handler;\n\n      return button;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Control group\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createControlGroup',\n    value: function createControlGroup(viewer, ctrlGroupName) {\n\n      var viewerToolbar = viewer.getToolbar(true);\n\n      if (viewerToolbar) {\n\n        var ctrlGroup = new Autodesk.Viewing.UI.ControlGroup(ctrlGroupName);\n\n        viewerToolbar.addControl(ctrlGroup);\n\n        return ctrlGroup;\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getLeafNodes',\n    value: function getLeafNodes(model, dbIds) {\n\n      return new Promise(function (resolve, reject) {\n\n        try {\n\n          var _instanceTree = model.getData().instanceTree;\n\n          dbIds = dbIds || _instanceTree.getRootId();\n\n          var dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds];\n\n          var leafIds = [];\n\n          var getLeafNodesRec = function getLeafNodesRec(id) {\n\n            var childCount = 0;\n\n            _instanceTree.enumNodeChildren(id, function (childId) {\n\n              getLeafNodesRec(childId);\n\n              ++childCount;\n            });\n\n            if (childCount == 0) {\n\n              leafIds.push(id);\n            }\n          };\n\n          for (var i = 0; i < dbIdArray.length; ++i) {\n\n            getLeafNodesRec(dbIdArray[i]);\n          }\n\n          return resolve(leafIds);\n        } catch (ex) {\n\n          return reject(ex);\n        }\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // get node fragIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getFragIds',\n    value: function getFragIds(model, dbIds) {\n      var _this = this;\n\n      return new Promise(function () {\n        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var i, _ret;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  return _context2.delegateYield(regeneratorRuntime.mark(function _callee() {\n                    var dbIdArray, instanceTree, leafIds, fragIds;\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds];\n                            instanceTree = model.getData().instanceTree;\n                            _context.next = 4;\n                            return ViewerToolkit.getLeafNodes(model, dbIdArray);\n\n                          case 4:\n                            leafIds = _context.sent;\n                            fragIds = [];\n\n\n                            for (i = 0; i < leafIds.length; ++i) {\n\n                              instanceTree.enumNodeFragments(leafIds[i], function (fragId) {\n                                fragIds.push(fragId);\n                              });\n                            }\n\n                            return _context.abrupt('return', {\n                              v: resolve(fragIds)\n                            });\n\n                          case 8:\n                          case 'end':\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, _this);\n                  })(), 't0', 2);\n\n                case 2:\n                  _ret = _context2.t0;\n\n                  if (!((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\")) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', _ret.v);\n\n                case 5:\n                  _context2.next = 10;\n                  break;\n\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t1 = _context2['catch'](0);\n                  return _context2.abrupt('return', reject(_context2.t1));\n\n                case 10:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this, [[0, 7]]);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Node bounding box\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getWorldBoundingBox',\n    value: function getWorldBoundingBox(model, dbId) {\n      var _this2 = this;\n\n      return new Promise(function () {\n        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var fragIds, fragList, fragbBox, nodebBox;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return ViewerToolkit.getFragIds(model, dbId);\n\n                case 3:\n                  fragIds = _context3.sent;\n\n                  if (fragIds.length) {\n                    _context3.next = 6;\n                    break;\n                  }\n\n                  return _context3.abrupt('return', reject('No geometry, invalid dbId?'));\n\n                case 6:\n                  fragList = model.getFragmentList();\n                  fragbBox = new THREE.Box3();\n                  nodebBox = new THREE.Box3();\n\n\n                  fragIds.forEach(function (fragId) {\n\n                    fragList.getWorldBounds(fragId, fragbBox);\n                    nodebBox.union(fragbBox);\n                  });\n\n                  return _context3.abrupt('return', resolve(nodebBox));\n\n                case 13:\n                  _context3.prev = 13;\n                  _context3.t0 = _context3['catch'](0);\n                  return _context3.abrupt('return', reject(_context3.t0));\n\n                case 16:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, _this2, [[0, 13]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Gets properties from component\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getProperties',\n    value: function getProperties(model, dbId) {\n      var requestedProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n\n      return new Promise(function (resolve, reject) {\n\n        try {\n\n          if (requestedProps) {\n\n            var propTasks = requestedProps.map(function (displayName) {\n\n              return ViewerToolkit.getProperty(model, dbId, displayName, 'Not Available');\n            });\n\n            Promise.all(propTasks).then(function (properties) {\n\n              resolve(properties);\n            });\n          } else {\n\n            model.getProperties(dbId, function (result) {\n\n              if (result.properties) {\n\n                return resolve(result.properties);\n              }\n\n              return reject('No Properties');\n            });\n          }\n        } catch (ex) {\n\n          console.log(ex);\n          return reject(ex);\n        }\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getProperty',\n    value: function getProperty(model, dbId, displayName, defaultValue) {\n\n      return new Promise(function (resolve, reject) {\n\n        try {\n\n          model.getProperties(dbId, function (result) {\n\n            if (result.properties) {\n\n              result.properties.forEach(function (prop) {\n\n                if (typeof displayName === 'function') {\n\n                  if (displayName(prop.displayName)) {\n\n                    resolve(prop);\n                  }\n                } else if (displayName === prop.displayName) {\n\n                  resolve(prop);\n                }\n              });\n\n              if (defaultValue) {\n\n                return resolve({\n                  displayValue: defaultValue,\n                  displayName: displayName\n                });\n              }\n\n              reject(new Error('Not Found'));\n            } else {\n\n              reject(new Error('Error getting properties'));\n            }\n          });\n        } catch (ex) {\n\n          return reject(ex);\n        }\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Gets all existing properties from component  dbIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getPropertyList',\n    value: function getPropertyList(model, dbIds) {\n      var _this3 = this;\n\n      return new Promise(function () {\n        var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(resolve, reject) {\n          var propertyTasks, propertyResults, properties;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  propertyTasks = dbIds.map(function (dbId) {\n\n                    return ViewerToolkit.getProperties(model, dbId);\n                  });\n                  _context4.next = 4;\n                  return Promise.all(propertyTasks);\n\n                case 4:\n                  propertyResults = _context4.sent;\n                  properties = [];\n\n\n                  propertyResults.forEach(function (propertyResult) {\n\n                    propertyResult.forEach(function (prop) {\n\n                      if (properties.indexOf(prop.displayName) < 0) {\n\n                        properties.push(prop.displayName);\n                      }\n                    });\n                  });\n\n                  return _context4.abrupt('return', resolve(properties.sort()));\n\n                case 10:\n                  _context4.prev = 10;\n                  _context4.t0 = _context4['catch'](0);\n                  return _context4.abrupt('return', reject(_context4.t0));\n\n                case 13:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, _this3, [[0, 10]]);\n        }));\n\n        return function (_x8, _x9) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getBulkPropertiesAsync',\n    value: function getBulkPropertiesAsync(model, dbIds, propFilter) {\n\n      return new Promise(function (resolve, reject) {\n\n        model.getBulkProperties(dbIds, propFilter, function (result) {\n\n          resolve(result);\n        }, function (error) {\n\n          reject(error);\n        });\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Maps components by property\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'mapComponentsByProp',\n    value: function mapComponentsByProp(model, propName, components, defaultProp) {\n      var _this4 = this;\n\n      return new Promise(function () {\n        var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          var results, propertyResults, componentsMap;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.prev = 0;\n                  _context5.next = 3;\n                  return ViewerToolkit.getBulkPropertiesAsync(model, components, [propName]);\n\n                case 3:\n                  results = _context5.sent;\n                  propertyResults = results.map(function (result) {\n\n                    return Object.assign({}, result.properties[0], {\n                      dbId: result.dbId\n                    });\n                  });\n                  componentsMap = {};\n\n\n                  propertyResults.forEach(function (result) {\n\n                    var value = result.displayValue;\n\n                    if (typeof value == 'string') {\n\n                      value = value.split(':')[0];\n                    }\n\n                    if (!componentsMap[value]) {\n\n                      componentsMap[value] = [];\n                    }\n\n                    componentsMap[value].push(result.dbId);\n                  });\n\n                  return _context5.abrupt('return', resolve(componentsMap));\n\n                case 10:\n                  _context5.prev = 10;\n                  _context5.t0 = _context5['catch'](0);\n                  return _context5.abrupt('return', reject(_context5.t0));\n\n                case 13:\n                case 'end':\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, _this4, [[0, 10]]);\n        }));\n\n        return function (_x10, _x11) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////\n    // Runs recursively the argument task on each node\n    // of the data tree\n    //\n    /////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'runTaskOnDataTree',\n    value: function runTaskOnDataTree(root, taskFunc) {\n\n      var tasks = [];\n\n      var runTaskOnDataTreeRec = function runTaskOnDataTreeRec(node) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\n        if (node.children) {\n\n          node.children.forEach(function (childNode) {\n\n            runTaskOnDataTreeRec(childNode, node);\n          });\n        }\n\n        var task = taskFunc(node, parent);\n\n        tasks.push(task);\n      };\n\n      runTaskOnDataTreeRec(root);\n\n      return Promise.all(tasks);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'drawBox',\n    value: function drawBox(viewer, min, max) {\n      var material = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n\n      var _material = material;\n\n      if (!_material) {\n\n        _material = new THREE.LineBasicMaterial({\n          color: 0xffff00,\n          linewidth: 2\n        });\n\n        viewer.impl.matman().addMaterial('ADN-Material-Line', _material, true);\n      }\n\n      function drawLines(coordsArray, mat) {\n\n        var lines = [];\n\n        for (var i = 0; i < coordsArray.length; i += 2) {\n\n          var start = coordsArray[i];\n          var end = coordsArray[i + 1];\n\n          var geometry = new THREE.Geometry();\n\n          geometry.vertices.push(new THREE.Vector3(start.x, start.y, start.z));\n\n          geometry.vertices.push(new THREE.Vector3(end.x, end.y, end.z));\n\n          geometry.computeLineDistances();\n\n          var line = new THREE.Line(geometry, mat);\n\n          viewer.impl.scene.add(line);\n\n          lines.push(line);\n        }\n\n        return lines;\n      }\n\n      var lines = drawLines([{ x: min.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: max.z }, { x: max.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: min.z }, { x: min.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: min.z }, { x: max.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: max.z }, { x: min.x, y: min.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: max.y, z: min.z }, { x: max.x, y: min.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: max.y, z: max.z }], _material);\n\n      viewer.impl.sceneUpdated(true);\n\n      return lines;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Set component material\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setMaterial',\n    value: function () {\n      var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(model, dbId, material) {\n        var fragIds, fragList;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return ViewerToolkit.getFragIds(model, dbId);\n\n              case 2:\n                fragIds = _context6.sent;\n                fragList = model.getFragmentList();\n\n\n                fragIds.forEach(function (fragId) {\n\n                  fragList.setMaterial(fragId, material);\n                });\n\n              case 5:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setMaterial(_x14, _x15, _x16) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return setMaterial;\n    }()\n\n    /////////////////////////////////////////////////////////////////\n    // Recursively builds the model tree\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'buildModelTree',\n    value: function buildModelTree(model) {\n      var createNodeFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\n      //builds model tree recursively\n      function _buildModelTreeRec(node) {\n\n        instanceTree.enumNodeChildren(node.dbId, function (childId) {\n\n          var childNode = null;\n\n          if (createNodeFunc) {\n\n            childNode = createNodeFunc(childId);\n          } else {\n\n            node.children = node.children || [];\n\n            childNode = {\n              dbId: childId,\n              name: instanceTree.getNodeName(childId)\n            };\n\n            node.children.push(childNode);\n          }\n\n          _buildModelTreeRec(childNode);\n        });\n      }\n\n      //get model instance tree and root component\n      var instanceTree = model.getData().instanceTree;\n\n      var rootId = instanceTree.getRootId();\n\n      var rootNode = {\n        dbId: rootId,\n        name: instanceTree.getNodeName(rootId)\n      };\n\n      _buildModelTreeRec(rootNode);\n\n      return rootNode;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Recursively execute task on model tree\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'executeTaskOnModelTree',\n    value: function executeTaskOnModelTree(model, task) {\n\n      var taskResults = [];\n\n      function _executeTaskOnModelTreeRec(dbId) {\n\n        instanceTree.enumNodeChildren(dbId, function (childId) {\n\n          taskResults.push(task(model, childId));\n\n          _executeTaskOnModelTreeRec(childId);\n        });\n      }\n\n      //get model instance tree and root component\n      var instanceTree = model.getData().instanceTree;\n\n      var rootId = instanceTree.getRootId();\n\n      _executeTaskOnModelTreeRec(rootId);\n\n      return taskResults;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'isolateFull',\n    value: function isolateFull(viewer) {\n      var _this5 = this;\n\n      var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var dbIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n\n      return new Promise(function () {\n        var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(resolve, reject) {\n          var targetIds, targetLeafIds, leafIds, leafTasks;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.prev = 0;\n\n\n                  model = model || viewer.model;\n\n                  viewer.isolate(dbIds);\n\n                  targetIds = Array.isArray(dbIds) ? dbIds : [dbIds];\n                  _context7.next = 6;\n                  return ViewerToolkit.getLeafNodes(model, targetIds);\n\n                case 6:\n                  targetLeafIds = _context7.sent;\n                  _context7.next = 9;\n                  return ViewerToolkit.getLeafNodes(model);\n\n                case 9:\n                  leafIds = _context7.sent;\n                  leafTasks = leafIds.map(function (dbId) {\n\n                    return new Promise(function (resolveLeaf) {\n\n                      var show = !targetLeafIds.length || targetLeafIds.indexOf(dbId) > -1;\n\n                      viewer.impl.visibilityManager.setNodeOff(dbId, !show);\n\n                      resolveLeaf();\n                    });\n                  });\n                  return _context7.abrupt('return', Promise.all(leafTasks));\n\n                case 14:\n                  _context7.prev = 14;\n                  _context7.t0 = _context7['catch'](0);\n                  return _context7.abrupt('return', reject(_context7.t0));\n\n                case 17:\n                case 'end':\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, _this5, [[0, 14]]);\n        }));\n\n        return function (_x20, _x21) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: 'mobile',\n    get: function get() {\n\n      return {\n\n        getUserAgent: function getUserAgent() {\n          return navigator.userAgent;\n        },\n        isAndroid: function isAndroid() {\n          return this.getUserAgent().match(/Android/i);\n        },\n        isBlackBerry: function isBlackBerry() {\n          return this.getUserAgent().match(/BlackBerry/i);\n        },\n        isIOS: function isIOS() {\n          return this.getUserAgent().match(/iPhone|iPad|iPod/i);\n        },\n        isOpera: function isOpera() {\n          return this.getUserAgent().match(/Opera Mini/i);\n        },\n        isWindows: function isWindows() {\n          return this.isWindowsDesktop() || this.isWindowsMobile();\n        },\n        isWindowsMobile: function isWindowsMobile() {\n          return this.getUserAgent().match(/IEMobile/i);\n        },\n        isWindowsDesktop: function isWindowsDesktop() {\n          return this.getUserAgent().match(/WPDesktop/i);\n        },\n        isAny: function isAny() {\n\n          return this.isAndroid() || this.isBlackBerry() || this.isIOS() || this.isWindowsMobile();\n        }\n      };\n    }\n  }]);\n\n  return ViewerToolkit;\n}();\n\nexports.default = ViewerToolkit;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},169:function(module,exports){eval('\'use strict\';\n\n(function init_TransformGizmos() {\n\n  \'use strict\';\n\n  var GizmoMaterial = function GizmoMaterial(parameters) {\n\n    THREE.MeshBasicMaterial.call(this);\n\n    this.depthTest = false;\n    this.depthWrite = false;\n    this.side = THREE.FrontSide;\n    this.transparent = true;\n\n    this.setValues(parameters);\n\n    this.oldColor = this.color.clone();\n    this.oldOpacity = this.opacity;\n\n    this.highlight = function (highlighted) {\n\n      if (highlighted) {\n\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n\n        this.color.copy(this.oldColor);\n        this.opacity = this.oldOpacity;\n      }\n    };\n  };\n\n  GizmoMaterial.prototype = Object.create(THREE.MeshBasicMaterial.prototype);\n\n  var GizmoLineMaterial = function GizmoLineMaterial(parameters) {\n\n    THREE.LineBasicMaterial.call(this);\n\n    this.depthTest = false;\n    this.depthWrite = false;\n    this.transparent = true;\n    this.linewidth = 3;\n\n    this.setValues(parameters);\n\n    this.oldColor = this.color.clone();\n    this.oldOpacity = this.opacity;\n\n    this.highlight = function (highlighted) {\n\n      if (highlighted) {\n\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n\n        this.color.copy(this.oldColor);\n        this.opacity = this.oldOpacity;\n      }\n    };\n  };\n\n  GizmoLineMaterial.prototype = Object.create(THREE.LineBasicMaterial.prototype);\n\n  // polyfill\n  if (THREE.PolyhedronGeometry === undefined) {\n    THREE.PolyhedronGeometry = function (vertices, indices, radius, detail) {\n\n      THREE.Geometry.call(this);\n\n      this.type = \'PolyhedronGeometry\';\n\n      this.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n      };\n\n      radius = radius || 1;\n      detail = detail || 0;\n\n      var that = this;\n\n      for (var i = 0, l = vertices.length; i < l; i += 3) {\n\n        prepare(new THREE.Vector3(vertices[i], vertices[i + 1], vertices[i + 2]));\n      }\n\n      var midpoints = [],\n          p = this.vertices;\n\n      var faces = [];\n\n      for (var i = 0, j = 0, l = indices.length; i < l; i += 3, j++) {\n\n        var v1 = p[indices[i]];\n        var v2 = p[indices[i + 1]];\n        var v3 = p[indices[i + 2]];\n\n        faces[j] = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n      }\n\n      var centroid = new THREE.Vector3();\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n\n        subdivide(faces[i], detail);\n      }\n\n      // Handle case when face straddles the seam\n\n      for (var i = 0, l = this.faceVertexUvs[0].length; i < l; i++) {\n\n        var uvs = this.faceVertexUvs[0][i];\n\n        var x0 = uvs[0].x;\n        var x1 = uvs[1].x;\n        var x2 = uvs[2].x;\n\n        var max = Math.max(x0, Math.max(x1, x2));\n        var min = Math.min(x0, Math.min(x1, x2));\n\n        if (max > 0.9 && min < 0.1) {\n          // 0.9 is somewhat arbitrary\n\n          if (x0 < 0.2) uvs[0].x += 1;\n          if (x1 < 0.2) uvs[1].x += 1;\n          if (x2 < 0.2) uvs[2].x += 1;\n        }\n      }\n\n      // Apply radius\n\n      for (var i = 0, l = this.vertices.length; i < l; i++) {\n\n        this.vertices[i].multiplyScalar(radius);\n      }\n\n      // Merge vertices\n\n      this.mergeVertices();\n\n      this.computeFaceNormals();\n\n      this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius);\n\n      // Project vector onto sphere\'s surface\n\n      function prepare(vector) {\n\n        var vertex = vector.normalize().clone();\n        vertex.index = that.vertices.push(vertex) - 1;\n\n        // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n        var u = azimuth(vector) / 2 / Math.PI + 0.5;\n        var v = inclination(vector) / Math.PI + 0.5;\n        vertex.uv = new THREE.Vector2(u, 1 - v);\n\n        return vertex;\n      }\n\n      // Approximate a curved face with recursively sub-divided triangles.\n\n      function make(v1, v2, v3) {\n\n        var face = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n        that.faces.push(face);\n\n        centroid.copy(v1).add(v2).add(v3).divideScalar(3);\n\n        var azi = azimuth(centroid);\n\n        that.faceVertexUvs[0].push([correctUV(v1.uv, v1, azi), correctUV(v2.uv, v2, azi), correctUV(v3.uv, v3, azi)]);\n      }\n\n      // Analytically subdivide a face to the required detail level.\n\n      function subdivide(face, detail) {\n\n        var cols = Math.pow(2, detail);\n        var cells = Math.pow(4, detail);\n        var a = prepare(that.vertices[face.a]);\n        var b = prepare(that.vertices[face.b]);\n        var c = prepare(that.vertices[face.c]);\n        var v = [];\n\n        // Construct all of the vertices for this subdivision.\n\n        for (var i = 0; i <= cols; i++) {\n\n          v[i] = [];\n\n          var aj = prepare(a.clone().lerp(c, i / cols));\n          var bj = prepare(b.clone().lerp(c, i / cols));\n          var rows = cols - i;\n\n          for (var j = 0; j <= rows; j++) {\n\n            if (j == 0 && i == cols) {\n\n              v[i][j] = aj;\n            } else {\n\n              v[i][j] = prepare(aj.clone().lerp(bj, j / rows));\n            }\n          }\n        }\n\n        // Construct all of the faces.\n\n        for (var i = 0; i < cols; i++) {\n\n          for (var j = 0; j < 2 * (cols - i) - 1; j++) {\n\n            var k = Math.floor(j / 2);\n\n            if (j % 2 == 0) {\n\n              make(v[i][k + 1], v[i + 1][k], v[i][k]);\n            } else {\n\n              make(v[i][k + 1], v[i + 1][k + 1], v[i + 1][k]);\n            }\n          }\n        }\n      }\n\n      // Angle around the Y axis, counter-clockwise when looking from above.\n\n      function azimuth(vector) {\n\n        return Math.atan2(vector.z, -vector.x);\n      }\n\n      // Angle above the XZ plane.\n\n      function inclination(vector) {\n\n        return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n      }\n\n      // Texture fixing helper. Spheres have some odd behaviours.\n\n      function correctUV(uv, vector, azimuth) {\n\n        if (azimuth < 0 && uv.x === 1) uv = new THREE.Vector2(uv.x - 1, uv.y);\n        if (vector.x === 0 && vector.z === 0) uv = new THREE.Vector2(azimuth / 2 / Math.PI + 0.5, uv.y);\n        return uv.clone();\n      }\n    };\n\n    THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  }\n\n  // polyfill\n  if (THREE.OctahedronGeometry === undefined) {\n    THREE.OctahedronGeometry = function (radius, detail) {\n\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n\n      var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\n      var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\n      THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n\n      this.type = \'OctahedronGeometry\';\n\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    };\n\n    THREE.OctahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  }\n\n  // polyfill\n  if (THREE.TorusGeometry === undefined) {\n    THREE.TorusGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n\n      THREE.Geometry.call(this);\n\n      this.type = \'TorusGeometry\';\n\n      this.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n      };\n\n      radius = radius || 100;\n      tube = tube || 40;\n      radialSegments = radialSegments || 8;\n      tubularSegments = tubularSegments || 6;\n      arc = arc || Math.PI * 2;\n\n      var center = new THREE.Vector3(),\n          uvs = [],\n          normals = [];\n\n      for (var j = 0; j <= radialSegments; j++) {\n\n        for (var i = 0; i <= tubularSegments; i++) {\n\n          var u = i / tubularSegments * arc;\n          var v = j / radialSegments * Math.PI * 2;\n\n          center.x = radius * Math.cos(u);\n          center.y = radius * Math.sin(u);\n\n          var vertex = new THREE.Vector3();\n          vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n          vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n          vertex.z = tube * Math.sin(v);\n\n          this.vertices.push(vertex);\n\n          uvs.push(new THREE.Vector2(i / tubularSegments, j / radialSegments));\n          normals.push(vertex.clone().sub(center).normalize());\n        }\n      }\n\n      for (var j = 1; j <= radialSegments; j++) {\n\n        for (var i = 1; i <= tubularSegments; i++) {\n\n          var a = (tubularSegments + 1) * j + i - 1;\n          var b = (tubularSegments + 1) * (j - 1) + i - 1;\n          var c = (tubularSegments + 1) * (j - 1) + i;\n          var d = (tubularSegments + 1) * j + i;\n\n          var face = new THREE.Face3(a, b, d, [normals[a].clone(), normals[b].clone(), normals[d].clone()]);\n          this.faces.push(face);\n          this.faceVertexUvs[0].push([uvs[a].clone(), uvs[b].clone(), uvs[d].clone()]);\n\n          face = new THREE.Face3(b, c, d, [normals[b].clone(), normals[c].clone(), normals[d].clone()]);\n          this.faces.push(face);\n          this.faceVertexUvs[0].push([uvs[b].clone(), uvs[c].clone(), uvs[d].clone()]);\n        }\n      }\n\n      this.computeFaceNormals();\n    };\n\n    THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  }\n\n  var createCircleGeometry = function createCircleGeometry(radius, facing, arc) {\n\n    var geometry = new THREE.Geometry();\n    arc = arc ? arc : 1;\n    for (var i = 0; i <= 64 * arc; ++i) {\n      if (facing == \'x\') geometry.vertices.push(new THREE.Vector3(0, Math.cos(i / 32 * Math.PI), Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == \'y\') geometry.vertices.push(new THREE.Vector3(Math.cos(i / 32 * Math.PI), 0, Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == \'z\') geometry.vertices.push(new THREE.Vector3(Math.sin(i / 32 * Math.PI), Math.cos(i / 32 * Math.PI), 0).multiplyScalar(radius));\n    }\n\n    return geometry;\n  };\n\n  var createArrowGeometry = function createArrowGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded) {\n\n    var arrowGeometry = new THREE.Geometry();\n    var mesh = new THREE.Mesh(new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded));\n    mesh.position.y = 0.5;\n    mesh.updateMatrix();\n\n    arrowGeometry.merge(mesh.geometry, mesh.matrix);\n\n    return arrowGeometry;\n  };\n\n  var createLineGeometry = function createLineGeometry(axis) {\n\n    var lineGeometry = new THREE.Geometry();\n    if (axis === \'X\') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(1, 0, 0));else if (axis === \'Y\') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));else if (axis === \'Z\') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n\n    return lineGeometry;\n  };\n\n  THREE.TransformGizmo = function () {\n\n    var scope = this;\n    var showPickers = false; //debug\n    var showActivePlane = false; //debug\n\n    this.init = function () {\n\n      THREE.Object3D.call(this);\n\n      this.handles = new THREE.Object3D();\n      this.pickers = new THREE.Object3D();\n      this.planes = new THREE.Object3D();\n      this.highlights = new THREE.Object3D();\n      this.hemiPicker = new THREE.Object3D();\n      this.subPickers = new THREE.Object3D();\n\n      this.add(this.handles);\n      this.add(this.pickers);\n      this.add(this.planes);\n      this.add(this.highlights);\n      this.add(this.hemiPicker);\n      this.add(this.subPickers);\n\n      //// PLANES\n\n      var planeGeometry = new THREE.PlaneBufferGeometry(50, 50, 2, 2);\n      var planeMaterial = new THREE.MeshBasicMaterial({ wireframe: true });\n      planeMaterial.side = THREE.DoubleSide;\n\n      var planes = {\n        "XY": new THREE.Mesh(planeGeometry, planeMaterial),\n        "YZ": new THREE.Mesh(planeGeometry, planeMaterial),\n        "XZ": new THREE.Mesh(planeGeometry, planeMaterial),\n        "XYZE": new THREE.Mesh(planeGeometry, planeMaterial)\n      };\n\n      this.activePlane = planes["XYZE"];\n\n      planes["YZ"].rotation.set(0, Math.PI / 2, 0);\n      planes["XZ"].rotation.set(-Math.PI / 2, 0, 0);\n\n      for (var i in planes) {\n        planes[i].name = i;\n        this.planes.add(planes[i]);\n        this.planes[i] = planes[i];\n        planes[i].visible = false;\n      }\n\n      this.setupGizmos();\n      this.activeMode = "";\n\n      // reset Transformations\n\n      this.traverse(function (child) {\n        if (child instanceof THREE.Mesh) {\n          child.updateMatrix();\n\n          var tempGeometry = new THREE.Geometry();\n          if (child.geometry instanceof THREE.BufferGeometry) {\n            child.geometry = new THREE.Geometry().fromBufferGeometry(child.geometry);\n          }\n          tempGeometry.merge(child.geometry, child.matrix);\n\n          child.geometry = tempGeometry;\n          child.position.set(0, 0, 0);\n          child.rotation.set(0, 0, 0);\n          child.scale.set(1, 1, 1);\n        }\n      });\n    };\n\n    this.hide = function () {\n      this.traverse(function (child) {\n        child.visible = false;\n      });\n    };\n\n    this.show = function () {\n      this.traverse(function (child) {\n        child.visible = true;\n        if (child.parent == scope.pickers || child.parent == scope.hemiPicker) child.visible = showPickers;\n        if (child.parent == scope.planes) child.visible = false;\n      });\n      this.activePlane.visible = showActivePlane;\n    };\n\n    this.highlight = function (axis) {\n      this.traverse(function (child) {\n        if (child.material && child.material.highlight) {\n          if (child.name == axis) {\n            child.material.highlight(true);\n          } else {\n            child.material.highlight(false);\n          }\n        }\n      });\n    };\n\n    this.setupGizmos = function () {\n\n      var addGizmos = function addGizmos(gizmoMap, parent) {\n\n        for (var name in gizmoMap) {\n\n          for (var i = gizmoMap[name].length; i--;) {\n\n            var object = gizmoMap[name][i][0];\n            var position = gizmoMap[name][i][1];\n            var rotation = gizmoMap[name][i][2];\n            var visble = gizmoMap[name][i][3];\n\n            object.name = name;\n\n            if (position) object.position.set(position[0], position[1], position[2]);\n            if (rotation) object.rotation.set(rotation[0], rotation[1], rotation[2]);\n            if (visble) object.visble = visble;\n\n            parent.add(object);\n          }\n        }\n      };\n\n      this.setHandlePickerGizmos();\n\n      addGizmos(this.handleGizmos, this.handles);\n      addGizmos(this.pickerGizmos, this.pickers);\n      addGizmos(this.highlightGizmos, this.highlights);\n      addGizmos(this.hemiPickerGizmos, this.hemiPicker);\n      addGizmos(this.subPickerGizmos, this.subPickers);\n\n      this.hide();\n      this.show();\n    };\n  };\n\n  THREE.TransformGizmo.prototype = Object.create(THREE.Object3D.prototype);\n\n  THREE.TransformGizmo.prototype.update = function (rotation, eye) {\n\n    var vec1 = new THREE.Vector3(0, 0, 0);\n    var vec2 = new THREE.Vector3(0, 1, 0);\n    var lookAtMatrix = new THREE.Matrix4();\n\n    this.traverse(function (child) {\n      if (child.name) {\n        if (child.name.search("E") != -1) {\n          child.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(eye, vec1, vec2));\n        } else if (child.name.search("X") != -1 || child.name.search("Y") != -1 || child.name.search("Z") != -1) {\n          child.quaternion.setFromEuler(rotation);\n        }\n      }\n    });\n  };\n\n  THREE.TransformGizmoTranslate = function () {\n\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n\n      var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n      var lineXGeometry = createLineGeometry(\'X\');\n      var lineYGeometry = createLineGeometry(\'Y\');\n      var lineZGeometry = createLineGeometry(\'Z\');\n\n      this.handleGizmos = {\n        X: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xf12c2c })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new THREE.Line(lineXGeometry, new GizmoLineMaterial({ color: 0xf12c2c }))]],\n        Y: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0bb80b })), [0, 0.5, 0]], [new THREE.Line(lineYGeometry, new GizmoLineMaterial({ color: 0x0bb80b }))]],\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x2c2cf1 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new THREE.Line(lineZGeometry, new GizmoLineMaterial({ color: 0x2c2cf1 }))]],\n        XYZ: [[new THREE.Mesh(new THREE.OctahedronGeometry(0.1, 0), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 })), [0, 0, 0], [0, 0, 0]]],\n        XY: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xffff00, opacity: 0.25 })), [0.15, 0.15, 0]]],\n        YZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 })), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n        XZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 })), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n      };\n\n      this.pickerGizmos = {\n        X: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n        Y: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0.6, 0]]],\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n        XYZ: [[new THREE.Mesh(new THREE.OctahedronGeometry(0.2, 0), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]],\n        XY: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0xffff00, opacity: 0.25 })), [0.2, 0.2, 0]]],\n        YZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 })), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n        XZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 })), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n      };\n\n      this.hemiPickerGizmos = {\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(1.2, 1.2, 1.2), new GizmoMaterial({ color: 0x0000ff })), [0.5, 0.5, 0.5], null, false]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n\n      var tempMatrix = new THREE.Matrix4();\n      eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes["XY"].matrixWorld)));\n\n      if (axis == "X") {\n        this.activePlane = this.planes["XY"];\n        if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes["XZ"];\n      }\n\n      if (axis == "Y") {\n        this.activePlane = this.planes["XY"];\n        if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes["YZ"];\n      }\n\n      if (axis == "Z") {\n        this.activePlane = this.planes["XZ"];\n        if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes["YZ"];\n      }\n\n      if (axis == "XYZ") this.activePlane = this.planes["XYZE"];\n\n      if (axis == "XY") this.activePlane = this.planes["XY"];\n\n      if (axis == "YZ") this.activePlane = this.planes["YZ"];\n\n      if (axis == "XZ") this.activePlane = this.planes["XZ"];\n\n      this.hide();\n      this.show();\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoTranslate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoRotate = function () {\n\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n\n      this.handleGizmos = {\n        RX: [[new THREE.Line(createCircleGeometry(1, \'x\', 0.5), new GizmoLineMaterial({ color: 0xff0000 }))]],\n        RY: [[new THREE.Line(createCircleGeometry(1, \'y\', 0.5), new GizmoLineMaterial({ color: 0x00ff00 }))]],\n        RZ: [[new THREE.Line(createCircleGeometry(1, \'z\', 0.5), new GizmoLineMaterial({ color: 0x0000ff }))]],\n        RE: [[new THREE.Line(createCircleGeometry(1.25, \'z\', 1), new GizmoLineMaterial({ color: 0x00ffff }))]],\n        RXYZE: [[new THREE.Line(createCircleGeometry(1, \'z\', 1), new GizmoLineMaterial({ color: 0xff00ff }))]]\n      };\n\n      this.pickerGizmos = {\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n        RZ: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n        RE: [[new THREE.Mesh(new THREE.TorusGeometry(1.25, 0.12, 2, 24), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 }))]],\n        RXYZE: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 2, 24), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 }))]]\n      };\n    };\n\n    this.setActivePlane = function (axis) {\n\n      if (axis == "RE") this.activePlane = this.planes["XYZE"];\n\n      if (axis == "RX") this.activePlane = this.planes["YZ"];\n\n      if (axis == "RY") this.activePlane = this.planes["XZ"];\n\n      if (axis == "RZ") this.activePlane = this.planes["XY"];\n\n      this.hide();\n      this.show();\n    };\n\n    this.update = function (rotation, eye2) {\n\n      THREE.TransformGizmo.prototype.update.apply(this, arguments);\n\n      var tempMatrix = new THREE.Matrix4();\n      var worldRotation = new THREE.Euler(0, 0, 1);\n      var tempQuaternion = new THREE.Quaternion();\n      var unitX = new THREE.Vector3(1, 0, 0);\n      var unitY = new THREE.Vector3(0, 1, 0);\n      var unitZ = new THREE.Vector3(0, 0, 1);\n      var quaternionX = new THREE.Quaternion();\n      var quaternionY = new THREE.Quaternion();\n      var quaternionZ = new THREE.Quaternion();\n      var eye = eye2.clone();\n\n      worldRotation.copy(this.planes["XY"].rotation);\n      tempQuaternion.setFromEuler(worldRotation);\n\n      tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);\n      eye.applyMatrix4(tempMatrix);\n\n      this.traverse(function (child) {\n\n        tempQuaternion.setFromEuler(worldRotation);\n\n        if (child.name == "RX") {\n          quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          child.quaternion.copy(tempQuaternion);\n        }\n\n        if (child.name == "RY") {\n          quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n          child.quaternion.copy(tempQuaternion);\n        }\n\n        if (child.name == "RZ") {\n          quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n          child.quaternion.copy(tempQuaternion);\n        }\n      });\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoRotate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoTranslateRotate = function () {\n\n    THREE.TransformGizmo.call(this);\n\n    var scope = this;\n\n    this.setHandlePickerGizmos = function () {\n\n      var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n      var lineGeometry = new THREE.Geometry();\n      lineGeometry.vertices.push(new THREE.Vector3(0, 0, -0.1), new THREE.Vector3(0, 0, 0.1), new THREE.Vector3(-0.1, 0, 0), new THREE.Vector3(0.1, 0, 0));\n      var theta = 0.15;\n\n      this.handleGizmos = {\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xffffff })), [0, 0, 0.25], [Math.PI / 2, 0, 0]], [new THREE.Mesh(new THREE.CylinderGeometry(0.015, 0.015, 0.6, 4, 1, false), new GizmoMaterial({ color: 0xffffff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({ color: 0xff0000 })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]], [new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.05, 0.015, 60, 1, false), new GizmoMaterial({ color: 0xff0000 })), [0, 0, 1], [Math.PI / 2, 0, 0]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]], [new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.05, 0.01, 60, 1, false), new GizmoMaterial({ color: 0x0000ff })), [0, 0, 1]]]\n      };\n\n      this.pickerGizmos = {\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]]]\n      };\n\n      this.subPickerGizmos = {\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]]\n      };\n\n      this.highlightGizmos = {\n        Z: [],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 1 })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2], false]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 1 })), [0, 0, 0], [Math.PI / 2, 0, 0], false]]\n      };\n\n      this.hemiPickerGizmos = {\n        XYZ: [[new THREE.Mesh(new THREE.SphereGeometry(1.2, 8, 8, 0, Math.PI), new GizmoMaterial({ color: 0x0000ff })), null, null, false]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n\n      if (this.activeMode == "translate") {\n\n        var tempMatrix = new THREE.Matrix4();\n        eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes["XY"].matrixWorld)));\n\n        if (axis == "X") {\n          this.activePlane = this.planes["XY"];\n          if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes["XZ"];\n        }\n\n        if (axis == "Y") {\n          this.activePlane = this.planes["XY"];\n          if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes["YZ"];\n        }\n\n        if (axis == "Z") {\n          this.activePlane = this.planes["XZ"];\n          if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes["YZ"];\n        }\n      } else if (this.activeMode == "rotate") {\n\n        if (axis == "RX") this.activePlane = this.planes["YZ"];\n\n        if (axis == "RY") this.activePlane = this.planes["XZ"];\n\n        if (axis == "RZ") this.activePlane = this.planes["XY"];\n      }\n\n      this.hide();\n      this.show();\n    };\n\n    this.update = function (rotation, eye2) {\n\n      if (this.activeMode == "translate") {\n\n        THREE.TransformGizmo.prototype.update.apply(this, arguments);\n      } else if (this.activeMode == "rotate") {\n\n        THREE.TransformGizmo.prototype.update.apply(this, arguments);\n\n        var tempMatrix = new THREE.Matrix4();\n        var worldRotation = new THREE.Euler(0, 0, 1);\n        var tempQuaternion = new THREE.Quaternion();\n        var unitX = new THREE.Vector3(1, 0, 0);\n        var unitY = new THREE.Vector3(0, 1, 0);\n        var unitZ = new THREE.Vector3(0, 0, 1);\n        var quaternionX = new THREE.Quaternion();\n        var quaternionY = new THREE.Quaternion();\n        var quaternionZ = new THREE.Quaternion();\n        var eye = eye2.clone();\n\n        worldRotation.copy(this.planes["XY"].rotation);\n        tempQuaternion.setFromEuler(worldRotation);\n\n        tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);\n        eye.applyMatrix4(tempMatrix);\n\n        this.traverse(function (child) {\n\n          tempQuaternion.setFromEuler(worldRotation);\n\n          if (child.name == "RX") {\n            quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == "RY") {\n            quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == "RZ") {\n            quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n            child.quaternion.copy(tempQuaternion);\n          }\n        });\n      }\n    };\n\n    this.show = function () {\n      this.traverse(function (child) {\n        if (scope.parent == null || scope.parent.useAllPickers || child.parent != scope.handles) child.visible = true;\n        if (child.material) child.material.opacity = child.material.oldOpacity;\n        if (child.parent == scope.pickers || child.parent == scope.hemiPicker || child.parent == scope.subPickers) child.visible = false;\n        if (child.parent == scope.planes || child.parent == scope.highlights) child.visible = false;\n      });\n      this.activePlane.visible = false;\n    };\n\n    this.highlight = function (axis) {\n      this.traverse(function (child) {\n        if (child.material && child.material.highlight) {\n          if (child.name == axis) {\n            if (child.parent == scope.highlights || child.parent == scope.handles) child.visible = true;\n            child.material.highlight(true);\n          } else {\n            child.material.highlight(false);\n            child.material.opacity = 0.1;\n          }\n        }\n      });\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoTranslateRotate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoScale = function () {\n\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n\n      var arrowGeometry = createArrowGeometry(0.125, 0.125, 0.125);\n      var lineXGeometry = createLineGeometry(\'X\');\n      var lineYGeometry = createLineGeometry(\'Y\');\n      var lineZGeometry = createLineGeometry(\'Z\');\n\n      this.handleGizmos = {\n        X: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xff0000 })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new THREE.Line(lineXGeometry, new GizmoLineMaterial({ color: 0xff0000 }))]],\n        Y: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x00ff00 })), [0, 0.5, 0]], [new THREE.Line(lineYGeometry, new GizmoLineMaterial({ color: 0x00ff00 }))]],\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new THREE.Line(lineZGeometry, new GizmoLineMaterial({ color: 0x0000ff }))]],\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(0.125, 0.125, 0.125), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]]\n      };\n\n      this.pickerGizmos = {\n        X: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n        Y: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0.6, 0]]],\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.4, 0.4), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n\n      var tempMatrix = new THREE.Matrix4();\n      eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes["XY"].matrixWorld)));\n\n      if (axis == "X") {\n        this.activePlane = this.planes["XY"];\n        if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes["XZ"];\n      }\n\n      if (axis == "Y") {\n        this.activePlane = this.planes["XY"];\n        if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes["YZ"];\n      }\n\n      if (axis == "Z") {\n        this.activePlane = this.planes["XZ"];\n        if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes["YZ"];\n      }\n\n      if (axis == "XYZ") this.activePlane = this.planes["XYZE"];\n\n      this.hide();\n      this.show();\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoScale.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformControls = function (camera, domElement, mode) {\n\n    // TODO: Make non-uniform scale and rotate play nice in hierarchies\n    // TODO: ADD RXYZ contol\n\n    THREE.Object3D.call(this);\n\n    domElement = domElement !== undefined ? domElement : document;\n\n    this.gizmo = {};\n    switch (mode) {\n      case "translate":\n        this.gizmo[mode] = new THREE.TransformGizmoTranslate();\n        break;\n      case "rotate":\n        this.gizmo[mode] = new THREE.TransformGizmoRotate();\n        break;\n      case "transrotate":\n        this.gizmo[mode] = new THREE.TransformGizmoTranslateRotate();\n        break;\n      case "scale":\n        this.gizmo[mode] = new THREE.TransformGizmoScale();\n        break;\n    }\n\n    this.add(this.gizmo[mode]);\n    this.gizmo[mode].hide();\n\n    this.object = undefined;\n    this.snap = null;\n    this.snapDelta = 0;\n    this.space = "world";\n    this.size = 1;\n    this.axis = null;\n    this.useAllPickers = true;\n\n    this.unitX = new THREE.Vector3(1, 0, 0);\n    this.unitY = new THREE.Vector3(0, 1, 0);\n    this.unitZ = new THREE.Vector3(0, 0, 1);\n    this.normal = new THREE.Vector3(0, 0, 1);\n\n    if (mode === "transrotate") {\n      var geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n      var material = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2, depthTest: false });\n      this.startLine = new THREE.Line(geometry, material);\n      var geometry = new THREE.Geometry();\n      var material = new THREE.LineBasicMaterial({ color: 0xffe603, linewidth: 2, depthTest: false });\n      geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n      this.endLine = new THREE.Line(geometry, material);\n      var geometry = new THREE.Geometry();\n      var material = new THREE.LineDashedMaterial({ color: 0x000000, linewidth: 1, depthTest: false });\n      geometry.vertices.push(new THREE.Vector3(0, -1, 0), new THREE.Vector3(0, 1, 0));\n      this.centerLine = new THREE.Line(geometry, material);\n\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl("res/textures/centerMarker_X.png"));\n      map.magFilter = map.minFilter = THREE.NearestFilter;\n      var geometry = new THREE.CircleGeometry(0.1, 32);\n      var material = new THREE.MeshBasicMaterial({ opacity: 1, side: THREE.DoubleSide, transparent: true, map: map });\n      this.centerMark = new THREE.Mesh(geometry, material);\n      this.centerMark.rotation.set(Math.PI / 2, 0, 0);\n\n      this.ticks = {};\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl("res/textures/cardinalPoint.png"));\n      map.magFilter = map.minFilter = THREE.NearestFilter;\n      var material = new THREE.MeshBasicMaterial({ depthTest: false, opacity: 1, transparent: true, side: THREE.DoubleSide, map: map });\n      var w = 0.12,\n          h = 0.25,\n          d = 1.15;\n\n      this.ticks["RX"] = new THREE.Object3D();\n      var geometry = new THREE.PlaneBufferGeometry(w, h);\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, 0, -d - h / 2);\n      mesh.rotation.set(Math.PI / 2, Math.PI / 2, 0);\n      this.ticks["RX"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(0, d + h / 2, 0);\n      mesh.rotation.set(0, Math.PI / 2, 0);\n      this.ticks["RX"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, d + h / 2);\n      mesh.rotation.set(0, Math.PI / 2, Math.PI / 2);\n      this.ticks["RX"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(0, -d - h / 2, 0);\n      mesh.rotation.set(0, Math.PI / 2, 0);\n      this.ticks["RX"].add(mesh);\n\n      this.ticks["RY"] = new THREE.Object3D();\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, -d - h / 2);\n      mesh.rotation.set(Math.PI / 2, 0, 0);\n      this.ticks["RY"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(-d - h / 2, 0, 0);\n      mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n      this.ticks["RY"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, d + h / 2);\n      mesh.rotation.set(Math.PI / 2, 0, 0);\n      this.ticks["RY"].add(mesh);\n\n      mesh = mesh.clone();\n      mesh.position.set(d + h / 2, 0, 0);\n      mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n      this.ticks["RY"].add(mesh);\n    }\n\n    var scope = this;\n\n    var _dragging = false;\n    var _mode = mode;\n    var _plane = "XY";\n\n    var changeEvent = { type: "change" };\n    var mouseDownEvent = { type: "mouseDown" };\n    var mouseUpEvent = { type: "mouseUp", mode: _mode };\n    var objectChangeEvent = { type: "objectChange" };\n\n    var ray = new THREE.Raycaster();\n    var pointerVector = new THREE.Vector3();\n    var pointerDir = new THREE.Vector3();\n\n    var point = new THREE.Vector3();\n    var offset = new THREE.Vector3();\n\n    var rotation = new THREE.Vector3();\n    var offsetRotation = new THREE.Vector3();\n    var scale = 1;\n\n    var lookAtMatrix = new THREE.Matrix4();\n    var eye = new THREE.Vector3();\n\n    var tempMatrix = new THREE.Matrix4();\n    var tempVector = new THREE.Vector3();\n    var tempQuaternion = new THREE.Quaternion();\n    var projX = new THREE.Vector3();\n    var projY = new THREE.Vector3();\n    var projZ = new THREE.Vector3();\n\n    var quaternionXYZ = new THREE.Quaternion();\n    var quaternionX = new THREE.Quaternion();\n    var quaternionY = new THREE.Quaternion();\n    var quaternionZ = new THREE.Quaternion();\n    var quaternionE = new THREE.Quaternion();\n\n    var oldPosition = new THREE.Vector3();\n    var oldScale = new THREE.Vector3();\n    var oldRotationMatrix = new THREE.Matrix4();\n\n    var parentRotationMatrix = new THREE.Matrix4();\n    var parentScale = new THREE.Vector3();\n\n    var worldPosition = new THREE.Vector3();\n    var worldRotation = new THREE.Euler();\n    var worldRotationMatrix = new THREE.Matrix4();\n    var camPosition = new THREE.Vector3();\n    var camRotation = new THREE.Euler();\n\n    this.attach = function (object) {\n\n      scope.object = object;\n\n      this.gizmo[_mode].show();\n\n      scope.update();\n\n      scope.updateUnitVectors();\n    };\n\n    this.detach = function (object) {\n\n      scope.object = undefined;\n      this.axis = null;\n\n      this.gizmo[_mode].hide();\n    };\n\n    this.setMode = function (mode) {\n\n      _mode = mode ? mode : _mode;\n\n      if (_mode == "scale") scope.space = "local";\n\n      this.gizmo[_mode].show();\n\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.getPicker = function () {\n\n      return scope.gizmo[_mode].hemiPicker.children;\n    };\n\n    this.setPosition = function (position) {\n\n      this.object.position.copy(position);\n      this.update();\n    };\n\n    this.setNormal = function (normal) {\n\n      tempQuaternion.setFromUnitVectors(this.normal, normal);\n      this.unitX.applyQuaternion(tempQuaternion);\n      this.unitY.applyQuaternion(tempQuaternion);\n      this.unitZ.applyQuaternion(tempQuaternion);\n      this.normal.copy(normal);\n      if (this.object) {\n        this.object.quaternion.multiply(tempQuaternion);\n      }\n      this.update();\n    };\n\n    this.setSnap = function (snap, delta) {\n\n      scope.snap = snap;\n      scope.snapDelta = delta;\n    };\n\n    this.setSize = function (size) {\n\n      scope.size = size;\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.setSpace = function (space) {\n\n      scope.space = space;\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.update = function (highlight) {\n\n      if (scope.object === undefined) return;\n\n      scope.object.updateMatrixWorld();\n      worldPosition.setFromMatrixPosition(scope.object.matrixWorld);\n      worldRotation.setFromRotationMatrix(tempMatrix.extractRotation(scope.object.matrixWorld));\n\n      camera.updateMatrixWorld();\n      camPosition.setFromMatrixPosition(camera.matrixWorld);\n      //camRotation.setFromRotationMatrix( tempMatrix.extractRotation( camera.matrixWorld ) );\n\n      this.position.copy(worldPosition);\n\n      this.quaternion.setFromEuler(worldRotation);\n\n      this.normal.set(0, 0, 1);\n      this.normal.applyEuler(worldRotation);\n\n      // keep same screen height (100px)\n      var dist = worldPosition.distanceTo(camPosition);\n      var height = camera.isPerspective ? 2 * Math.tan(camera.fov * Math.PI / 360) * dist : dist;\n      var rect = domElement.getBoundingClientRect();\n      scale = 100 * height / rect.height;\n      this.scale.set(scale, scale, scale);\n\n      //eye.copy( camPosition ).sub( worldPosition ).normalize();\n\n      //if ( scope.space == "local" )\n      //    this.gizmo[_mode].update( worldRotation, eye );\n      //else if ( scope.space == "world" )\n      //    this.gizmo[_mode].update( new THREE.Euler(), eye );\n\n      if (highlight) this.gizmo[_mode].highlight(scope.axis);\n    };\n\n    this.updateUnitVectors = function () {\n\n      this.unitX.set(1, 0, 0);\n      this.unitY.set(0, 1, 0);\n      this.unitZ.set(0, 0, 1);\n      this.unitX.applyEuler(worldRotation);\n      this.unitY.applyEuler(worldRotation);\n      this.unitZ.applyEuler(worldRotation);\n    };\n\n    this.showRotationGizmos = function (set) {\n\n      var handles = this.gizmo[_mode].handles.children;\n      for (var i = 0; i < handles.length; i++) {\n        var child = handles[i];\n        child.visible = true;\n        if (child.name.search("R") !== -1) child.visible = set;\n      }\n      this.useAllPickers = set;\n    };\n\n    this.highlight = function () {\n\n      this.gizmo[_mode].highlight(this.axis || "Z");\n    };\n\n    this.onPointerHover = function (event) {\n\n      if (scope.object === undefined || _dragging === true) return false;\n\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n      var axis = null;\n      var mode = "";\n\n      if (intersect) {\n\n        axis = intersect.object.name;\n        mode = axis.search("R") != -1 ? "rotate" : "translate";\n      }\n\n      if (scope.axis !== axis) {\n\n        scope.axis = axis;\n        scope.gizmo[_mode].activeMode = mode;\n        scope.update(true);\n        scope.dispatchEvent(changeEvent);\n      }\n\n      if (scope.axis === null) {\n\n        scope.gizmo[_mode].show();\n      }\n\n      return intersect ? true : false;\n    };\n\n    this.onPointerDown = function (event) {\n\n      if (scope.object === undefined || _dragging === true) return false;\n\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (event.pointerType === \'touch\') {\n\n        var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n        var axis = null;\n        var mode = "";\n\n        if (intersect) {\n\n          axis = intersect.object.name;\n          mode = axis.search("R") != -1 ? "rotate" : "translate";\n        }\n\n        if (scope.axis !== axis) {\n\n          scope.axis = axis;\n          scope.gizmo[_mode].activeMode = mode;\n        }\n      }\n\n      var intersect = null;\n\n      if (pointer.button === 0 || pointer.button === undefined) {\n\n        intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n        if (intersect) {\n\n          scope.dispatchEvent(mouseDownEvent);\n\n          scope.axis = intersect.object.name;\n\n          scope.update();\n\n          eye.copy(camera.position).sub(worldPosition).normalize();\n\n          scope.gizmo[_mode].setActivePlane(scope.axis, eye);\n\n          var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n\n          if (planeIntersect) offset.copy(planeIntersect.point);\n\n          oldPosition.copy(scope.object.position);\n          oldScale.copy(scope.object.scale);\n\n          oldRotationMatrix.extractRotation(scope.object.matrix);\n          worldRotationMatrix.extractRotation(scope.object.matrixWorld);\n\n          if (scope.object.parent) {\n            parentRotationMatrix.extractRotation(scope.object.parent.matrixWorld);\n            parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.parent.matrixWorld));\n          } else {\n            parentRotationMatrix.extractRotation(scope.object.matrixWorld);\n            parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.matrixWorld));\n          }\n\n          // show rotation start line and ticks\n          if (_mode === "transrotate" && scope.gizmo[_mode].activeMode === "rotate") {\n            scope.startLine.geometry.vertices[0].set(0, 0, 0).applyMatrix4(scope.matrixWorld);\n            scope.startLine.geometry.vertices[1].set(0, 0, 1).applyMatrix4(scope.matrixWorld);\n            scope.startLine.geometry.verticesNeedUpdate = true;\n            scope.parent.add(scope.startLine);\n\n            var pos = scope.object.geometry.getAttribute(\'position\');\n            var pt1 = new THREE.Vector3().fromAttribute(pos, 0).applyMatrix4(scope.object.matrixWorld);\n            var pt2 = new THREE.Vector3().fromAttribute(pos, 1).applyMatrix4(scope.object.matrixWorld);\n            var pt3 = new THREE.Vector3().fromAttribute(pos, 2).applyMatrix4(scope.object.matrixWorld);\n            var pt4 = new THREE.Vector3().fromAttribute(pos, 3).applyMatrix4(scope.object.matrixWorld);\n            if (scope.axis === "RX") {\n              pt1.lerp(pt3, 0.5);\n              pt2.lerp(pt4, 0.5);\n              var dist = pt1.distanceTo(pt2);\n              scope.centerLine.material.dashSize = dist / 15;\n              scope.centerLine.material.gapSize = dist / 30;\n              scope.centerLine.geometry.vertices[0].copy(pt1);\n              scope.centerLine.geometry.vertices[1].copy(pt2);\n            } else {\n              pt1.lerp(pt2, 0.5);\n              pt3.lerp(pt4, 0.5);\n              var dist = pt1.distanceTo(pt3);\n              scope.centerLine.material.dashSize = dist / 15;\n              scope.centerLine.material.gapSize = dist / 30;\n              scope.centerLine.geometry.vertices[0].copy(pt1);\n              scope.centerLine.geometry.vertices[1].copy(pt3);\n            }\n            scope.centerLine.geometry.computeLineDistances();\n            scope.centerLine.geometry.verticesNeedUpdate = true;\n            scope.parent.add(scope.centerLine);\n\n            scope.ticks[scope.axis].position.copy(scope.position);\n            scope.ticks[scope.axis].quaternion.copy(scope.quaternion);\n            scope.ticks[scope.axis].scale.copy(scope.scale);\n            scope.parent.add(scope.ticks[scope.axis]);\n          }\n        }\n      }\n\n      _dragging = true;\n\n      return intersect ? true : false;\n    };\n\n    this.onPointerMove = function (event) {\n\n      if (scope.object === undefined || scope.axis === null || _dragging === false) return false;\n\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n\n      if (planeIntersect) point.copy(planeIntersect.point);\n\n      var mode = scope.gizmo[_mode].activeMode;\n      if (mode == "translate") {\n\n        point.sub(offset);\n        point.multiply(parentScale);\n\n        if (scope.space == "local") {\n\n          point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n          projX.copy(this.unitX);\n          projY.copy(this.unitY);\n          projZ.copy(this.unitZ);\n          tempVector.set(0, 0, 0);\n          if (scope.axis.search("X") != -1) {\n            projX.multiplyScalar(point.dot(this.unitX));\n            tempVector.add(projX);\n          }\n          if (scope.axis.search("Y") != -1) {\n            projY.multiplyScalar(point.dot(this.unitY));\n            tempVector.add(projY);\n          }\n          if (scope.axis.search("Z") != -1) {\n            projZ.multiplyScalar(point.dot(this.unitZ));\n            tempVector.add(projZ);\n          }\n          point.copy(tempVector);\n\n          point.applyMatrix4(oldRotationMatrix);\n\n          scope.object.position.copy(oldPosition);\n          scope.object.position.add(point);\n        }\n\n        if (scope.space == "world" || scope.axis.search("XYZ") != -1) {\n\n          projX.copy(this.unitX);\n          projY.copy(this.unitY);\n          projZ.copy(this.unitZ);\n          tempVector.set(0, 0, 0);\n          if (scope.axis.search("X") != -1) {\n            projX.multiplyScalar(point.dot(this.unitX));\n            tempVector.add(projX);\n          }\n          if (scope.axis.search("Y") != -1) {\n            projY.multiplyScalar(point.dot(this.unitY));\n            tempVector.add(projY);\n          }\n          if (scope.axis.search("Z") != -1) {\n            projZ.multiplyScalar(point.dot(this.unitZ));\n            tempVector.add(projZ);\n          }\n          point.copy(tempVector);\n\n          point.applyMatrix4(tempMatrix.getInverse(parentRotationMatrix));\n\n          scope.object.position.copy(oldPosition);\n          scope.object.position.add(point);\n        }\n      } else if (mode == "scale") {\n\n        point.sub(offset);\n        point.multiply(parentScale);\n\n        if (scope.space == "local") {\n\n          if (scope.axis == "XYZ") {\n\n            scale = 1 + point.y / 50;\n\n            scope.object.scale.x = oldScale.x * scale;\n            scope.object.scale.y = oldScale.y * scale;\n            scope.object.scale.z = oldScale.z * scale;\n          } else {\n\n            point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n            if (scope.axis == "X") scope.object.scale.x = oldScale.x * (1 + point.x / 50);\n            if (scope.axis == "Y") scope.object.scale.y = oldScale.y * (1 + point.y / 50);\n            if (scope.axis == "Z") scope.object.scale.z = oldScale.z * (1 + point.z / 50);\n          }\n        }\n      } else if (mode == "rotate") {\n\n        point.sub(worldPosition);\n        point.multiply(parentScale);\n        tempVector.copy(offset).sub(worldPosition);\n        tempVector.multiply(parentScale);\n\n        if (scope.axis == "RE") {\n\n          point.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n          tempVector.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n\n          rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n          offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n\n          var rotz = rotation.z - offsetRotation.z;\n          if (scope.snap !== null) {\n            var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n            if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n              rotz = rotsnap;\n            }\n          }\n          quaternionE.setFromAxisAngle(eye, rotz);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionE);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n          scope.object.quaternion.copy(tempQuaternion);\n        } else if (scope.axis == "RXYZE") {\n\n          var tempAxis = point.clone().cross(tempVector).normalize(); // rotation axis\n\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n\n          var rot = -point.clone().angleTo(tempVector);\n          if (scope.snap !== null) {\n            var rotsnap = Math.round(rot / scope.snap) * scope.snap;\n            if (Math.abs(rotsnap - rot) < scope.snapDelta) {\n              rot = rotsnap;\n            }\n          }\n          quaternionX.setFromAxisAngle(tempAxis, rot);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n          scope.object.quaternion.copy(tempQuaternion);\n        } else if (scope.space == "local") {\n\n          point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n          tempVector.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n          var projx = point.dot(this.unitX),\n              projy = point.dot(this.unitY),\n              projz = point.dot(this.unitZ);\n          var tempx = tempVector.dot(this.unitX),\n              tempy = tempVector.dot(this.unitY),\n              tempz = tempVector.dot(this.unitZ);\n          rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n          offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n\n          var rotx = rotation.x - offsetRotation.x;\n          var roty = rotation.y - offsetRotation.y;\n          var rotz = rotation.z - offsetRotation.z;\n          if (scope.snap !== null) {\n            if (scope.axis.search("X") != -1) {\n              var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                rotx = rotsnap;\n              }\n            }\n            if (scope.axis.search("Y") != -1) {\n              var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                roty = rotsnap;\n              }\n            }\n            if (scope.axis.search("Z") != -1) {\n              var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                rotz = rotsnap;\n              }\n            }\n          }\n          quaternionX.setFromAxisAngle(this.unitX, rotx);\n          quaternionY.setFromAxisAngle(this.unitY, roty);\n          quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n          quaternionXYZ.setFromRotationMatrix(oldRotationMatrix);\n\n          if (scope.axis == "RX") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionX);\n          if (scope.axis == "RY") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionY);\n          if (scope.axis == "RZ") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionZ);\n\n          scope.object.quaternion.copy(quaternionXYZ);\n        } else if (scope.space == "world") {\n\n          var projx = point.dot(this.unitX),\n              projy = point.dot(this.unitY),\n              projz = point.dot(this.unitZ);\n          var tempx = tempVector.dot(this.unitX),\n              tempy = tempVector.dot(this.unitY),\n              tempz = tempVector.dot(this.unitZ);\n          rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n          offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n\n          var rotx = rotation.x - offsetRotation.x;\n          var roty = rotation.y - offsetRotation.y;\n          var rotz = rotation.z - offsetRotation.z;\n          if (scope.snap !== null) {\n            if (scope.axis.search("X") != -1) {\n              var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                rotx = rotsnap;\n              }\n            }\n            if (scope.axis.search("Y") != -1) {\n              var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                roty = rotsnap;\n              }\n            }\n            if (scope.axis.search("Z") != -1) {\n              var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                rotz = rotsnap;\n              }\n            }\n          }\n          quaternionX.setFromAxisAngle(this.unitX, rotx);\n          quaternionY.setFromAxisAngle(this.unitY, roty);\n          quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n          if (scope.axis == "RX") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          if (scope.axis == "RY") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n          if (scope.axis == "RZ") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n          scope.object.quaternion.copy(tempQuaternion);\n        }\n\n        // show rotation end line\n        if (_mode === "transrotate") {\n          scope.add(scope.endLine);\n          scope.add(scope.centerMark);\n        }\n      }\n\n      // update matrix\n      scope.object.matrixAutoUpdate = true;\n\n      scope.update(true);\n      scope.dispatchEvent(changeEvent);\n      scope.dispatchEvent(objectChangeEvent);\n\n      return planeIntersect ? true : false;\n    };\n\n    this.onPointerUp = function (event) {\n\n      if (_dragging && scope.axis !== null) {\n        mouseUpEvent.mode = _mode;\n        scope.dispatchEvent(mouseUpEvent);\n      }\n      _dragging = false;\n\n      this.gizmo[_mode].show();\n\n      this.updateUnitVectors();\n\n      // remove rotation start/end lines\n      if (_mode === "transrotate" && this.gizmo[_mode].activeMode === "rotate") {\n        this.remove(this.endLine);\n        this.remove(this.centerMark);\n        this.parent.remove(this.centerLine);\n        this.parent.remove(this.startLine);\n        this.parent.remove(this.ticks[this.axis]);\n      }\n\n      return false;\n    };\n\n    function intersectObjects(pointer, objects) {\n\n      var rect = domElement.getBoundingClientRect();\n      var x = (pointer.clientX - rect.left) / rect.width * 2 - 1;\n      var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1;\n\n      if (camera.isPerspective) {\n        pointerVector.set(x, y, 0.5);\n        pointerVector.unproject(camera);\n        ray.set(camera.position, pointerVector.sub(camera.position).normalize());\n      } else {\n        pointerVector.set(x, y, -1);\n        pointerVector.unproject(camera);\n        pointerDir.set(0, 0, -1);\n        ray.set(pointerVector, pointerDir.transformDirection(camera.matrixWorld));\n      }\n\n      var intersections = ray.intersectObjects(objects, true);\n      return intersections[0] ? intersections[0] : false;\n    }\n  };\n\n  THREE.TransformControls.prototype = Object.create(THREE.Object3D.prototype);\n})();//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},170:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter3 = __webpack_require__(2);\n\nvar _EventsEmitter4 = _interopRequireDefault(_EventsEmitter3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RotateTool = function (_EventsEmitter) {\n  _inherits(RotateTool, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function RotateTool(viewer) {\n    _classCallCheck(this, RotateTool);\n\n    var _this = _possibleConstructorReturn(this, (RotateTool.__proto__ || Object.getPrototypeOf(RotateTool)).call(this));\n\n    _this.keys = {};\n\n    _this.active = false;\n\n    _this.viewer = viewer;\n\n    _this.fullTransform = false;\n\n    _this.viewer.toolController.registerTool(_this);\n\n    _this.onAggregateSelectionChangedHandler = function (e) {\n\n      _this.onAggregateSelectionChanged(e);\n    };\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Enable tool\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(RotateTool, [{\n    key: 'enable',\n    value: function enable(_enable) {\n\n      var name = this.getName();\n\n      if (_enable) {\n\n        this.viewer.toolController.activateTool(name);\n      } else {\n\n        this.viewer.toolController.deactivateTool(name);\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getNames',\n    value: function getNames() {\n\n      return ['Viewing.Rotate.Tool'];\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getName',\n    value: function getName() {\n\n      return 'Viewing.Rotate.Tool';\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    // activate tool\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'activate',\n    value: function activate() {\n\n      if (!this.active) {\n\n        this.active = true;\n\n        this.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // deactivate tool\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n\n      if (this.active) {\n\n        this.active = false;\n\n        if (this.rotateControl) {\n\n          this.rotateControl.remove();\n          this.rotateControl = null;\n        }\n\n        this.viewer.removeEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Component Selection Handler \n    // (use Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT instead of \n    //  Autodesk.Viewing.SELECTION_CHANGED_EVENT - deprecated )\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onAggregateSelectionChanged',\n    value: function onAggregateSelectionChanged(event) {\n\n      if (this.rotateControl && this.rotateControl.engaged) {\n\n        this.rotateControl.engaged = false;\n\n        this.viewer.select(this.selection.dbIdArray);\n\n        return;\n      }\n\n      if (event.selections && event.selections.length) {\n\n        var selection = event.selections[0];\n\n        this.selection = selection;\n\n        this.emit('transform.modelSelected', this.selection);\n\n        if (this.fullTransform) {\n\n          this.selection.fragIdsArray = [];\n\n          var fragCount = selection.model.getFragmentList().fragments.fragId2dbId.length;\n\n          for (var fragId = 0; fragId < fragCount; ++fragId) {\n\n            this.selection.fragIdsArray.push(fragId);\n          }\n\n          this.selection.dbIdArray = [];\n\n          var instanceTree = selection.model.getData().instanceTree;\n\n          var rootId = instanceTree.getRootId();\n\n          this.selection.dbIdArray.push(rootId);\n        }\n\n        this.drawControl();\n\n        this.viewer.fitToView(this.selection.dbIdArray);\n      } else {\n\n        this.clearSelection();\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Selection cleared\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'clearSelection',\n    value: function clearSelection() {\n\n      this.selection = null;\n\n      if (this.rotateControl) {\n\n        this.rotateControl.remove();\n\n        this.rotateControl = null;\n\n        this.viewer.impl.sceneUpdated(true);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw rotate control\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'drawControl',\n    value: function drawControl() {\n      var _this2 = this;\n\n      var bBox = this.geWorldBoundingBox(this.selection.fragIdsArray, this.selection.model.getFragmentList());\n\n      this.center = new THREE.Vector3((bBox.min.x + bBox.max.x) / 2, (bBox.min.y + bBox.max.y) / 2, (bBox.min.z + bBox.max.z) / 2);\n\n      var size = Math.max(bBox.max.x - bBox.min.x, bBox.max.y - bBox.min.y, bBox.max.z - bBox.min.z) * 0.8;\n\n      if (this.rotateControl) {\n\n        this.rotateControl.remove();\n      }\n\n      this.rotateControl = new RotateControl(this.viewer, this.center, size);\n\n      this.rotateControl.on('transform.rotate', function (data) {\n\n        _this2.rotateFragments(_this2.selection.model, _this2.selection.fragIdsArray, data.axis, data.angle, _this2.center);\n\n        _this2.viewer.impl.sceneUpdated(true);\n      });\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleButtonDown',\n    value: function handleButtonDown(event, button) {\n\n      if (this.rotateControl) {\n\n        if (this.rotateControl.onPointerDown(event)) {\n\n          return true;\n        }\n      }\n\n      if (button === 0 && this.keys.Control) {\n\n        this.isDragging = true;\n\n        this.mousePos = {\n          x: event.clientX,\n          y: event.clientY\n        };\n\n        return true;\n      }\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleButtonUp',\n    value: function handleButtonUp(event, button) {\n\n      if (this.rotateControl) {\n\n        this.rotateControl.onPointerUp(event);\n      }\n\n      if (button === 0) {\n\n        this.isDragging = false;\n      }\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(event) {\n\n      if (this.rotateControl) {\n\n        this.rotateControl.onPointerHover(event);\n      }\n\n      if (this.isDragging) {\n\n        if (this.selection) {\n\n          var offset = {\n            x: this.mousePos.x - event.clientX,\n            y: event.clientY - this.mousePos.y\n          };\n\n          this.mousePos = {\n            x: event.clientX,\n            y: event.clientY\n          };\n\n          var angle = Math.sqrt(offset.x * offset.x + offset.y * offset.y);\n\n          var sidewaysDirection = new THREE.Vector3();\n          var moveDirection = new THREE.Vector3();\n          var eyeDirection = new THREE.Vector3();\n          var upDirection = new THREE.Vector3();\n          var camera = this.viewer.getCamera();\n          var axis = new THREE.Vector3();\n          var eye = new THREE.Vector3();\n\n          eye.copy(camera.position).sub(camera.target);\n\n          eyeDirection.copy(eye).normalize();\n\n          upDirection.copy(camera.up).normalize();\n\n          sidewaysDirection.crossVectors(upDirection, eyeDirection).normalize();\n\n          upDirection.setLength(offset.y);\n\n          sidewaysDirection.setLength(offset.x);\n\n          moveDirection.copy(upDirection.add(sidewaysDirection));\n\n          axis.crossVectors(moveDirection, eye).normalize();\n\n          this.rotateFragments(this.selection.model, this.selection.fragIdsArray, axis, angle * Math.PI / 180, this.center);\n\n          this.viewer.impl.sceneUpdated(true);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event, keyCode) {\n\n      this.keys[event.key] = true;\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(event, keyCode) {\n\n      this.keys[event.key] = false;\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Rotate selected fragments\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'rotateFragments',\n    value: function rotateFragments(model, fragIdsArray, axis, angle, center) {\n      var _this3 = this;\n\n      var quaternion = new THREE.Quaternion();\n\n      quaternion.setFromAxisAngle(axis, angle);\n\n      fragIdsArray.forEach(function (fragId, idx) {\n\n        var fragProxy = _this3.viewer.impl.getFragmentProxy(model, fragId);\n\n        fragProxy.getAnimTransform();\n\n        var position = new THREE.Vector3(fragProxy.position.x - center.x, fragProxy.position.y - center.y, fragProxy.position.z - center.z);\n\n        position.applyQuaternion(quaternion);\n\n        position.add(center);\n\n        fragProxy.position = position;\n\n        fragProxy.quaternion.multiplyQuaternions(quaternion, fragProxy.quaternion);\n\n        if (idx === 0) {\n\n          var euler = new THREE.Euler();\n\n          euler.setFromQuaternion(fragProxy.quaternion, 0);\n\n          _this3.emit('transform.rotate', {\n            rotation: euler,\n            model: model\n          });\n        }\n\n        fragProxy.updateAnimTransform();\n      });\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // returns bounding box as it appears in the viewer\n    // (transformations could be applied)\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'geWorldBoundingBox',\n    value: function geWorldBoundingBox(fragIds, fragList) {\n\n      var fragbBox = new THREE.Box3();\n      var nodebBox = new THREE.Box3();\n\n      fragIds.forEach(function (fragId) {\n\n        fragList.getWorldBounds(fragId, fragbBox);\n        nodebBox.union(fragbBox);\n      });\n\n      return nodebBox;\n    }\n  }]);\n\n  return RotateTool;\n}(_EventsEmitter4.default);\n\n///////////////////////////////////////////////////////////////////////////////\n// RotateControl Class\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nexports.default = RotateTool;\n\nvar RotateControl = function (_EventsEmitter2) {\n  _inherits(RotateControl, _EventsEmitter2);\n\n  function RotateControl(viewer, center, size) {\n    _classCallCheck(this, RotateControl);\n\n    var _this4 = _possibleConstructorReturn(this, (RotateControl.__proto__ || Object.getPrototypeOf(RotateControl)).call(this));\n\n    _this4.engaged = false;\n\n    _this4.overlayScene = 'rotateControlScene';\n    _this4.domElement = viewer.impl.canvas;\n    _this4.camera = viewer.impl.camera;\n    _this4.viewer = viewer;\n    _this4.center = center;\n    _this4.size = size;\n    _this4.gizmos = [];\n\n    _this4.viewer.impl.createOverlayScene(_this4.overlayScene);\n\n    _this4.createAxis(center, new THREE.Vector3(1, 0, 0), size * 0.85, 0xFF0000);\n\n    _this4.createAxis(center, new THREE.Vector3(0, 1, 0), size * 0.85, 0x00FF00);\n\n    _this4.createAxis(center, new THREE.Vector3(0, 0, 1), size * 0.85, 0x0000FF);\n\n    // World UP = Y\n\n    if (_this4.camera.worldup.y) {\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, Math.PI / 2, 0), size * 0.0045, size * 0.8, 0xFF0000, Math.PI, new THREE.Vector3(1, 0, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, 0, 0), size * 0.0045, size * 0.8, 0x00FF00, 2 * Math.PI, new THREE.Vector3(0, 1, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, 0, 0), size * 0.0045, size * 0.8, 0x0000FF, Math.PI, new THREE.Vector3(0, 0, 1)));\n    } else {\n\n      // World UP = Z\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, Math.PI / 2, 0), size * 0.0045, size * 0.8, 0xFF0000, Math.PI, new THREE.Vector3(1, 0, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, 0, 0), size * 0.0045, size * 0.8, 0x00FF00, Math.PI, new THREE.Vector3(0, 1, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, 0, 0), size * 0.0045, size * 0.8, 0x0000FF, 2 * Math.PI, new THREE.Vector3(0, 0, 1)));\n    }\n\n    _this4.picker = _this4.createSphere(size * 0.02);\n\n    var material = new THREE.LineBasicMaterial({\n      color: 0xFFFF00,\n      linewidth: 1,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    _this4.angleLine = _this4.createLine(_this4.center, _this4.center, material);\n\n    viewer.impl.sceneUpdated(true);\n    return _this4;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a line\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(RotateControl, [{\n    key: 'createLine',\n    value: function createLine(start, end, material) {\n\n      var geometry = new THREE.Geometry();\n\n      geometry.vertices.push(new THREE.Vector3(start.x, start.y, start.z));\n\n      geometry.vertices.push(new THREE.Vector3(end.x, end.y, end.z));\n\n      var line = new THREE.Line(geometry, material);\n\n      this.viewer.impl.addOverlay(this.overlayScene, line);\n\n      return line;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw a cone\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createCone',\n    value: function createCone(start, dir, length, material) {\n\n      dir.normalize();\n\n      var end = {\n        x: start.x + dir.x * length,\n        y: start.y + dir.y * length,\n        z: start.z + dir.z * length\n      };\n\n      var orientation = new THREE.Matrix4();\n\n      orientation.lookAt(start, end, new THREE.Object3D().up);\n\n      var matrix = new THREE.Matrix4();\n\n      matrix.set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1);\n\n      orientation.multiply(matrix);\n\n      var geometry = new THREE.CylinderGeometry(0, length * 0.2, length, 128, 1);\n\n      var cone = new THREE.Mesh(geometry, material);\n\n      cone.applyMatrix(orientation);\n\n      cone.position.x = start.x + dir.x * length / 2;\n      cone.position.y = start.y + dir.y * length / 2;\n      cone.position.z = start.z + dir.z * length / 2;\n\n      this.viewer.impl.addOverlay(this.overlayScene, cone);\n\n      return cone;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw one axis\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createAxis',\n    value: function createAxis(start, dir, size, color) {\n\n      var end = {\n        x: start.x + dir.x * size,\n        y: start.y + dir.y * size,\n        z: start.z + dir.z * size\n      };\n\n      var material = new THREE.LineBasicMaterial({\n        color: color,\n        linewidth: 3,\n        depthTest: false,\n        depthWrite: false,\n        transparent: true\n      });\n\n      this.createLine(start, end, material);\n\n      this.createCone(end, dir, size * 0.1, material);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw a rotate gizmo\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createGizmo',\n    value: function createGizmo(center, euler, size, radius, color, range, axis) {\n\n      var material = new GizmoMaterial({\n        color: color\n      });\n\n      var subMaterial = new GizmoMaterial({\n        color: color\n      });\n\n      var torusGizmo = new THREE.Mesh(new THREE.TorusGeometry(radius, size, 64, 64, range), material);\n\n      var subTorus = new THREE.Mesh(new THREE.TorusGeometry(radius, size, 64, 64, 2 * Math.PI), subMaterial);\n\n      subTorus.material.highlight(true);\n\n      var transform = new THREE.Matrix4();\n\n      var q = new THREE.Quaternion();\n\n      q.setFromEuler(euler);\n\n      var s = new THREE.Vector3(1, 1, 1);\n\n      transform.compose(center, q, s);\n\n      torusGizmo.applyMatrix(transform);\n\n      subTorus.applyMatrix(transform);\n\n      var plane = this.createBox(this.size * 100, this.size * 100, 0.01);\n\n      plane.applyMatrix(transform);\n\n      subTorus.visible = false;\n\n      this.viewer.impl.addOverlay(this.overlayScene, torusGizmo);\n\n      this.viewer.impl.addOverlay(this.overlayScene, subTorus);\n\n      torusGizmo.subGizmo = subTorus;\n      torusGizmo.plane = plane;\n      torusGizmo.axis = axis;\n\n      return torusGizmo;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw a box\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createBox',\n    value: function createBox(w, h, d) {\n\n      var material = new GizmoMaterial({\n        color: 0x000000\n      });\n\n      var geometry = new THREE.BoxGeometry(w, h, d);\n\n      var box = new THREE.Mesh(geometry, material);\n\n      box.visible = false;\n\n      this.viewer.impl.addOverlay(this.overlayScene, box);\n\n      return box;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Draw a sphere\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createSphere',\n    value: function createSphere(radius) {\n\n      var material = new GizmoMaterial({\n        color: 0xFFFF00\n      });\n\n      var geometry = new THREE.SphereGeometry(radius, 32, 32);\n\n      var sphere = new THREE.Mesh(geometry, material);\n\n      sphere.visible = false;\n\n      this.viewer.impl.addOverlay(this.overlayScene, sphere);\n\n      return sphere;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Creates Raycatser object from the pointer\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'pointerToRaycaster',\n    value: function pointerToRaycaster(pointer) {\n\n      var pointerVector = new THREE.Vector3();\n      var pointerDir = new THREE.Vector3();\n      var ray = new THREE.Raycaster();\n\n      var rect = this.domElement.getBoundingClientRect();\n\n      var x = (pointer.clientX - rect.left) / rect.width * 2 - 1;\n      var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1;\n\n      if (this.camera.isPerspective) {\n\n        pointerVector.set(x, y, 0.5);\n\n        pointerVector.unproject(this.camera);\n\n        ray.set(this.camera.position, pointerVector.sub(this.camera.position).normalize());\n      } else {\n\n        pointerVector.set(x, y, -1);\n\n        pointerVector.unproject(this.camera);\n\n        pointerDir.set(0, 0, -1);\n\n        ray.set(pointerVector, pointerDir.transformDirection(this.camera.matrixWorld));\n      }\n\n      return ray;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onPointerDown',\n    value: function onPointerDown(event) {\n\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (pointer.button === 0) {\n\n        var ray = this.pointerToRaycaster(pointer);\n\n        var intersectResults = ray.intersectObjects(this.gizmos, true);\n\n        if (intersectResults.length) {\n\n          this.gizmos.forEach(function (gizmo) {\n\n            gizmo.visible = false;\n          });\n\n          this.selectedGizmo = intersectResults[0].object;\n\n          this.selectedGizmo.subGizmo.visible = true;\n\n          this.picker.position.copy(intersectResults[0].point);\n\n          this.angleLine.geometry.vertices[1].copy(intersectResults[0].point);\n\n          this.lastDir = intersectResults[0].point.sub(this.center).normalize();\n\n          this.angleLine.geometry.verticesNeedUpdate = true;\n\n          this.angleLine.visible = true;\n\n          this.picker.visible = true;\n        } else {\n\n          this.picker.visible = false;\n        }\n\n        this.engaged = this.picker.visible;\n\n        this.viewer.impl.sceneUpdated(true);\n      }\n\n      return this.picker.visible;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onPointerHover',\n    value: function onPointerHover(event) {\n\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (this.engaged) {\n\n        var ray = this.pointerToRaycaster(pointer);\n\n        var intersectResults = ray.intersectObjects([this.selectedGizmo.plane], true);\n\n        if (intersectResults.length) {\n\n          var intersectPoint = intersectResults[0].point;\n\n          var dir = intersectPoint.sub(this.center).normalize();\n\n          var cross = new THREE.Vector3();\n\n          cross.crossVectors(this.lastDir, dir);\n\n          var sign = Math.sign(cross.dot(this.selectedGizmo.axis));\n\n          this.emit('transform.rotate', {\n            angle: sign * dir.angleTo(this.lastDir),\n            axis: this.selectedGizmo.axis\n          });\n\n          this.lastDir = dir;\n\n          var pickerPoint = new THREE.Vector3(this.center.x + dir.x * this.size * 0.8, this.center.y + dir.y * this.size * 0.8, this.center.z + dir.z * this.size * 0.8);\n\n          this.picker.position.copy(pickerPoint);\n\n          this.angleLine.geometry.vertices[1].copy(pickerPoint);\n        }\n\n        this.angleLine.visible = true;\n\n        this.angleLine.geometry.verticesNeedUpdate = true;\n      } else {\n\n        this.angleLine.visible = false;\n\n        var ray = this.pointerToRaycaster(pointer);\n\n        var intersectResults = ray.intersectObjects(this.gizmos, true);\n\n        if (intersectResults.length) {\n\n          this.picker.position.set(intersectResults[0].point.x, intersectResults[0].point.y, intersectResults[0].point.z);\n\n          this.picker.visible = true;\n        } else {\n\n          this.picker.visible = false;\n        }\n      }\n\n      this.viewer.impl.sceneUpdated(true);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onPointerUp',\n    value: function onPointerUp(event) {\n      var _this5 = this;\n\n      this.angleLine.visible = false;\n\n      this.picker.visible = false;\n\n      this.gizmos.forEach(function (gizmo) {\n\n        gizmo.visible = true;\n        gizmo.subGizmo.visible = false;\n      });\n\n      this.viewer.impl.sceneUpdated(true);\n\n      setTimeout(function () {\n        _this5.engaged = false;\n      }, 100);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'normalize',\n    value: function normalize(screenPoint) {\n\n      var viewport = this.viewer.navigation.getScreenViewport();\n\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n\n      return n;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'projectOntoPlane',\n    value: function projectOntoPlane(worldPoint, normal) {\n\n      var dist = normal.dot(worldPoint);\n\n      return new THREE.Vector3(worldPoint.x - dist * normal.x, worldPoint.y - dist * normal.y, worldPoint.z - dist * normal.z);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n\n      this.viewer.impl.removeOverlayScene(this.overlayScene);\n    }\n  }]);\n\n  return RotateControl;\n}(_EventsEmitter4.default);\n\n///////////////////////////////////////////////////////////////////////////////\n// Highlightable Gizmo Material\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar GizmoMaterial = function (_THREE$MeshBasicMater) {\n  _inherits(GizmoMaterial, _THREE$MeshBasicMater);\n\n  function GizmoMaterial(parameters) {\n    _classCallCheck(this, GizmoMaterial);\n\n    var _this6 = _possibleConstructorReturn(this, (GizmoMaterial.__proto__ || Object.getPrototypeOf(GizmoMaterial)).call(this));\n\n    _this6.setValues(parameters);\n\n    _this6.colorInit = _this6.color.clone();\n    _this6.opacityInit = _this6.opacity;\n    _this6.side = THREE.FrontSide;\n    _this6.depthWrite = false;\n    _this6.transparent = true;\n    _this6.depthTest = false;\n    return _this6;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GizmoMaterial, [{\n    key: 'highlight',\n    value: function highlight(highlighted) {\n\n      if (highlighted) {\n\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n\n        this.color.copy(this.colorInit);\n        this.opacity = this.opacityInit;\n      }\n    }\n  }]);\n\n  return GizmoMaterial;\n}(THREE.MeshBasicMaterial);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},171:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter2 = __webpack_require__(2);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\n__webpack_require__(169);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TransformTool = function (_EventsEmitter) {\n  _inherits(TransformTool, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function TransformTool(viewer) {\n    _classCallCheck(this, TransformTool);\n\n    var _this = _possibleConstructorReturn(this, (TransformTool.__proto__ || Object.getPrototypeOf(TransformTool)).call(this));\n\n    _this.active = false;\n\n    _this._viewer = viewer;\n\n    _this._hitPoint = null;\n\n    _this._isDragging = false;\n\n    _this.fullTransform = false;\n\n    _this._transformMesh = null;\n\n    _this._transformControlTx = null;\n\n    _this._selectedFragProxyMap = {};\n\n    _this.onTxChange = _this.onTxChange.bind(_this);\n\n    _this.onAggregateSelectionChanged = _this.onAggregateSelectionChanged.bind(_this);\n\n    _this.onCameraChanged = _this.onCameraChanged.bind(_this);\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(TransformTool, [{\n    key: 'getNames',\n    value: function getNames() {\n\n      return [\"Viewing.Transform.Tool\"];\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getName',\n    value: function getName() {\n\n      return \"Viewing.Transform.Tool\";\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Creates a dummy mesh to attach control to\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createTransformMesh',\n    value: function createTransformMesh() {\n\n      var material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n\n      this._viewer.impl.matman().addMaterial('transform-tool-material', material, true);\n\n      var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.0001, 5), material);\n\n      sphere.position.set(0, 0, 0);\n\n      return sphere;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // on translation change\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onTxChange',\n    value: function onTxChange() {\n\n      if (this._isDragging && this._transformControlTx.visible) {\n\n        var translation = new THREE.Vector3(this._transformMesh.position.x - this._selection.model.offset.x, this._transformMesh.position.y - this._selection.model.offset.y, this._transformMesh.position.z - this._selection.model.offset.z);\n\n        for (var fragId in this._selectedFragProxyMap) {\n\n          var fragProxy = this._selectedFragProxyMap[fragId];\n\n          var position = new THREE.Vector3(this._transformMesh.position.x - fragProxy.offset.x, this._transformMesh.position.y - fragProxy.offset.y, this._transformMesh.position.z - fragProxy.offset.z);\n\n          fragProxy.position = position;\n\n          fragProxy.updateAnimTransform();\n        }\n\n        this.emit('transform.translate', {\n          model: this._selection.model,\n          translation: translation\n        });\n      }\n\n      this._viewer.impl.sceneUpdated(true);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // on camera changed\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onCameraChanged',\n    value: function onCameraChanged() {\n\n      if (this._transformControlTx) {\n\n        this._transformControlTx.update();\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // item selected callback\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onAggregateSelectionChanged',\n    value: function onAggregateSelectionChanged(event) {\n\n      if (event.selections && event.selections.length) {\n\n        this._selection = event.selections[0];\n\n        if (this.fullTransform) {\n\n          this._selection.fragIdsArray = [];\n\n          var fragCount = this._selection.model.getFragmentList().fragments.fragId2dbId.length;\n\n          for (var fragId = 0; fragId < fragCount; ++fragId) {\n\n            this._selection.fragIdsArray.push(fragId);\n          }\n\n          this._selection.dbIdArray = [];\n\n          var instanceTree = this._selection.model.getData().instanceTree;\n\n          var rootId = instanceTree.getRootId();\n\n          this._selection.dbIdArray.push(rootId);\n        }\n\n        this.emit('transform.modelSelected', this._selection);\n\n        this.initializeSelection(this._hitPoint);\n      } else {\n\n        this.clearSelection();\n      }\n    }\n  }, {\n    key: 'initializeSelection',\n    value: function initializeSelection(hitPoint) {\n      var _this2 = this;\n\n      this._selectedFragProxyMap = {};\n\n      var modelTransform = this._selection.model.transform || { translation: { x: 0, y: 0, z: 0 } };\n\n      this._selection.model.offset = {\n        x: hitPoint.x - modelTransform.translation.x,\n        y: hitPoint.y - modelTransform.translation.y,\n        z: hitPoint.z - modelTransform.translation.z\n      };\n\n      this._transformControlTx.visible = true;\n\n      this._transformControlTx.setPosition(hitPoint);\n\n      this._transformControlTx.addEventListener('change', this.onTxChange);\n\n      this._viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n      this._selection.fragIdsArray.forEach(function (fragId) {\n\n        var fragProxy = _this2._viewer.impl.getFragmentProxy(_this2._selection.model, fragId);\n\n        fragProxy.getAnimTransform();\n\n        fragProxy.offset = {\n\n          x: hitPoint.x - fragProxy.position.x,\n          y: hitPoint.y - fragProxy.position.y,\n          z: hitPoint.z - fragProxy.position.z\n        };\n\n        _this2._selectedFragProxyMap[fragId] = fragProxy;\n      });\n    }\n  }, {\n    key: 'clearSelection',\n    value: function clearSelection() {\n\n      if (this.active) {\n\n        this._selection = null;\n\n        this._selectedFragProxyMap = {};\n\n        this._transformControlTx.visible = false;\n\n        this._transformControlTx.removeEventListener('change', this.onTxChange);\n\n        this._viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n        this._viewer.impl.sceneUpdated(true);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // normalize screen coordinates\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'normalize',\n    value: function normalize(screenPoint) {\n\n      var viewport = this._viewer.navigation.getScreenViewport();\n\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n\n      return n;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // get 3d hit point on mesh\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getHitPoint',\n    value: function getHitPoint(event) {\n\n      var screenPoint = {\n        x: event.clientX,\n        y: event.clientY\n      };\n\n      var n = this.normalize(screenPoint);\n\n      var hitPoint = this._viewer.utilities.getHitPoint(n.x, n.y);\n\n      return hitPoint;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'activate',\n    value: function activate() {\n\n      if (!this.active) {\n\n        this.active = true;\n\n        this._viewer.select([]);\n\n        var bbox = this._viewer.model.getBoundingBox();\n\n        this._viewer.impl.createOverlayScene('TransformToolOverlay');\n\n        this._transformControlTx = new THREE.TransformControls(this._viewer.impl.camera, this._viewer.impl.canvas, \"translate\");\n\n        this._transformControlTx.setSize(bbox.getBoundingSphere().radius * 5);\n\n        this._transformControlTx.visible = false;\n\n        this._viewer.impl.addOverlay('TransformToolOverlay', this._transformControlTx);\n\n        this._transformMesh = this.createTransformMesh();\n\n        this._transformControlTx.attach(this._transformMesh);\n\n        this._viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChanged);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // deactivate tool\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n\n      if (this.active) {\n\n        this.active = false;\n\n        this._viewer.impl.removeOverlay('TransformToolOverlay', this._transformControlTx);\n\n        this._transformControlTx.removeEventListener('change', this.onTxChange);\n\n        this._viewer.impl.removeOverlayScene('TransformToolOverlay');\n\n        this._viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n        this._viewer.removeEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChanged);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleButtonDown',\n    value: function handleButtonDown(event, button) {\n\n      this._hitPoint = this.getHitPoint(event);\n\n      this._isDragging = true;\n\n      if (this._transformControlTx.onPointerDown(event)) return true;\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleButtonUp',\n    value: function handleButtonUp(event, button) {\n\n      this._isDragging = false;\n\n      if (this._transformControlTx.onPointerUp(event)) return true;\n\n      return false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(event) {\n\n      if (this._isDragging) {\n\n        if (this._transformControlTx.onPointerMove(event)) {\n\n          return true;\n        }\n\n        return false;\n      }\n\n      if (this._transformControlTx.onPointerHover(event)) return true;\n\n      return false;\n    }\n  }]);\n\n  return TransformTool;\n}(_EventsEmitter3.default);\n\nexports.default = TransformTool;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
}})});